/**
 * LaunchDarkly REST API
 * Build custom integrations with the LaunchDarkly REST API
 *
 * The version of the OpenAPI document: 3.8.0
 * Contact: support@launchdarkly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface AuditLogEntries
 */
export interface AuditLogEntries {
    /**
     *
     * @type {Links}
     * @memberof AuditLogEntries
     */
    _links?: Links;
    /**
     *
     * @type {Array<AuditLogEntry>}
     * @memberof AuditLogEntries
     */
    items?: Array<AuditLogEntry>;
}
/**
 *
 * @export
 * @interface AuditLogEntry
 */
export interface AuditLogEntry {
    /**
     *
     * @type {Links}
     * @memberof AuditLogEntry
     */
    _links?: Links;
    /**
     * The unique resource id.
     * @type {string}
     * @memberof AuditLogEntry
     */
    _id?: string;
    /**
     *
     * @type {number}
     * @memberof AuditLogEntry
     */
    date?: number;
    /**
     *
     * @type {string}
     * @memberof AuditLogEntry
     */
    kind?: string;
    /**
     *
     * @type {string}
     * @memberof AuditLogEntry
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof AuditLogEntry
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof AuditLogEntry
     */
    shortDescription?: string;
    /**
     *
     * @type {string}
     * @memberof AuditLogEntry
     */
    comment?: string;
    /**
     *
     * @type {Member}
     * @memberof AuditLogEntry
     */
    member?: Member;
    /**
     *
     * @type {string}
     * @memberof AuditLogEntry
     */
    titleVerb?: string;
    /**
     *
     * @type {string}
     * @memberof AuditLogEntry
     */
    title?: string;
    /**
     *
     * @type {AuditLogEntryTarget}
     * @memberof AuditLogEntry
     */
    target?: AuditLogEntryTarget;
}
/**
 *
 * @export
 * @interface AuditLogEntryTarget
 */
export interface AuditLogEntryTarget {
    /**
     *
     * @type {Links}
     * @memberof AuditLogEntryTarget
     */
    _links?: Links;
    /**
     *
     * @type {string}
     * @memberof AuditLogEntryTarget
     */
    name?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof AuditLogEntryTarget
     */
    resources?: Array<string>;
}
/**
 *
 * @export
 * @interface Clause
 */
export interface Clause {
    /**
     *
     * @type {string}
     * @memberof Clause
     */
    _id?: string;
    /**
     *
     * @type {string}
     * @memberof Clause
     */
    attribute?: string;
    /**
     *
     * @type {string}
     * @memberof Clause
     */
    op?: string;
    /**
     *
     * @type {Array<object>}
     * @memberof Clause
     */
    values?: Array<object>;
    /**
     *
     * @type {boolean}
     * @memberof Clause
     */
    negate?: boolean;
}
/**
 *
 * @export
 * @interface ClientSideAvailability
 */
export interface ClientSideAvailability {
    /**
     * When set to true, this flag will be available to SDKs using the client-side id.
     * @type {boolean}
     * @memberof ClientSideAvailability
     */
    usingEnvironmentId?: boolean;
    /**
     * When set to true, this flag will be available to SDKS using a mobile key.
     * @type {boolean}
     * @memberof ClientSideAvailability
     */
    usingMobileKey?: boolean;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum CopyActions {
    UpdateOn = "updateOn",
    UpdatePrerequisites = "updatePrerequisites",
    UpdateTargets = "updateTargets",
    UpdateRules = "updateRules",
    UpdateFallthrough = "updateFallthrough",
    UpdateOffVariation = "updateOffVariation"
}
/**
 * A name and value describing a custom property.
 * @export
 * @interface CustomProperty
 */
export interface CustomProperty {
    /**
     * The name of the property.
     * @type {string}
     * @memberof CustomProperty
     */
    name: string;
    /**
     * Values for this property.
     * @type {Array<string>}
     * @memberof CustomProperty
     */
    value?: Array<string>;
}
/**
 *
 * @export
 * @interface CustomRole
 */
export interface CustomRole {
    /**
     *
     * @type {Links}
     * @memberof CustomRole
     */
    _links?: Links;
    /**
     * Name of the custom role.
     * @type {string}
     * @memberof CustomRole
     */
    name?: string;
    /**
     * The 20-hexdigit id or the key for a custom role.
     * @type {string}
     * @memberof CustomRole
     */
    key?: string;
    /**
     * Description of the custom role.
     * @type {string}
     * @memberof CustomRole
     */
    description?: string;
    /**
     * The unique resource id.
     * @type {string}
     * @memberof CustomRole
     */
    _id?: string;
    /**
     *
     * @type {Array<Policy>}
     * @memberof CustomRole
     */
    policy?: Array<Policy>;
}
/**
 *
 * @export
 * @interface CustomRoles
 */
export interface CustomRoles {
    /**
     *
     * @type {Links}
     * @memberof CustomRoles
     */
    _links?: Links;
    /**
     *
     * @type {Array<CustomRole>}
     * @memberof CustomRoles
     */
    items?: Array<CustomRole>;
}
/**
 * Default values to be used when a new environment is created.
 * @export
 * @interface Defaults
 */
export interface Defaults {
    /**
     * The index of the variation to be served when a flag\'s targeting is on (default variation).
     * @type {number}
     * @memberof Defaults
     */
    onVariation: number;
    /**
     * The index of the variation to be served when a flag is off.
     * @type {number}
     * @memberof Defaults
     */
    offVariation: number;
}
/**
 *
 * @export
 * @interface Destination
 */
export interface Destination {
    /**
     *
     * @type {Links}
     * @memberof Destination
     */
    _links?: Links;
    /**
     * Unique destination ID.
     * @type {string}
     * @memberof Destination
     */
    _id?: string;
    /**
     * The destination name
     * @type {string}
     * @memberof Destination
     */
    name?: string;
    /**
     * Destination type (\"google-pubsub\", \"kinesis\", \"mparticle\", or \"segment\")
     * @type {string}
     * @memberof Destination
     */
    kind?: DestinationKindEnum;
    /**
     * destination-specific configuration.
     * @type {object}
     * @memberof Destination
     */
    config?: object;
    /**
     * Whether the data export destination is on or not.
     * @type {boolean}
     * @memberof Destination
     */
    on?: boolean;
    /**
     *
     * @type {number}
     * @memberof Destination
     */
    version?: number;
}
/**
    * @export
    * @enum {string}
    */
export declare enum DestinationKindEnum {
    GooglePubsub = "google-pubsub",
    Kinesis = "kinesis",
    Mparticle = "mparticle",
    Segment = "segment"
}
/**
 *
 * @export
 * @interface DestinationAmazonKinesis
 */
export interface DestinationAmazonKinesis {
    /**
     *
     * @type {string}
     * @memberof DestinationAmazonKinesis
     */
    region?: string;
    /**
     *
     * @type {string}
     * @memberof DestinationAmazonKinesis
     */
    roleArn?: string;
    /**
     *
     * @type {string}
     * @memberof DestinationAmazonKinesis
     */
    streamName?: string;
}
/**
 *
 * @export
 * @interface DestinationGooglePubSub
 */
export interface DestinationGooglePubSub {
    /**
     *
     * @type {string}
     * @memberof DestinationGooglePubSub
     */
    project?: string;
    /**
     *
     * @type {string}
     * @memberof DestinationGooglePubSub
     */
    topic?: string;
}
/**
 *
 * @export
 * @interface DestinationMParticle
 */
export interface DestinationMParticle {
    /**
     *
     * @type {string}
     * @memberof DestinationMParticle
     */
    apiKey?: string;
    /**
     *
     * @type {string}
     * @memberof DestinationMParticle
     */
    secret?: string;
    /**
     *
     * @type {string}
     * @memberof DestinationMParticle
     */
    userIdentity?: string;
    /**
     *
     * @type {string}
     * @memberof DestinationMParticle
     */
    environment?: string;
}
/**
 *
 * @export
 * @interface DestinationSegment
 */
export interface DestinationSegment {
    /**
     *
     * @type {string}
     * @memberof DestinationSegment
     */
    writeKey?: string;
}
/**
 *
 * @export
 * @interface Destinations
 */
export interface Destinations {
    /**
     *
     * @type {Links}
     * @memberof Destinations
     */
    _links?: Links;
    /**
     *
     * @type {Array<Destination>}
     * @memberof Destinations
     */
    items?: Array<Destination>;
}
/**
 *
 * @export
 * @interface Environment
 */
export interface Environment {
    /**
     *
     * @type {Links}
     * @memberof Environment
     */
    _links?: Links;
    /**
     * The unique resource id.
     * @type {string}
     * @memberof Environment
     */
    _id?: string;
    /**
     * The key for the environment.
     * @type {string}
     * @memberof Environment
     */
    key?: string;
    /**
     * The name of the environment.
     * @type {string}
     * @memberof Environment
     */
    name?: string;
    /**
     * The SDK key for backend LaunchDarkly SDKs.
     * @type {string}
     * @memberof Environment
     */
    apiKey?: string;
    /**
     * The SDK key for mobile LaunchDarkly SDKs.
     * @type {string}
     * @memberof Environment
     */
    mobileKey?: string;
    /**
     * The swatch color for the environment.
     * @type {string}
     * @memberof Environment
     */
    color?: string;
    /**
     * The default TTL.
     * @type {number}
     * @memberof Environment
     */
    defaultTtl?: number;
    /**
     * Determines if this environment is in safe mode.
     * @type {boolean}
     * @memberof Environment
     */
    secureMode?: boolean;
    /**
     * Set to true to send detailed event information for new flags.
     * @type {boolean}
     * @memberof Environment
     */
    defaultTrackEvents?: boolean;
    /**
     * An array of tags for this environment.
     * @type {Array<string>}
     * @memberof Environment
     */
    tags?: Array<string>;
    /**
     * Determines if this environment requires comments for flag and segment changes.
     * @type {boolean}
     * @memberof Environment
     */
    requireComments?: boolean;
    /**
     * Determines if this environment requires confirmation for flag and segment changes.
     * @type {boolean}
     * @memberof Environment
     */
    confirmChanges?: boolean;
}
/**
 *
 * @export
 * @interface EnvironmentPost
 */
export interface EnvironmentPost {
    /**
     * The name of the new environment.
     * @type {string}
     * @memberof EnvironmentPost
     */
    name: string;
    /**
     * A project-unique key for the new environment.
     * @type {string}
     * @memberof EnvironmentPost
     */
    key: string;
    /**
     * A color swatch (as an RGB hex value with no leading \'#\', e.g. C8C8C8).
     * @type {string}
     * @memberof EnvironmentPost
     */
    color: string;
    /**
     * The default TTL for the new environment.
     * @type {number}
     * @memberof EnvironmentPost
     */
    defaultTtl?: number;
    /**
     * Determines whether the environment is in secure mode.
     * @type {boolean}
     * @memberof EnvironmentPost
     */
    secureMode?: boolean;
    /**
     * Set to true to send detailed event information for newly created flags.
     * @type {boolean}
     * @memberof EnvironmentPost
     */
    defaultTrackEvents?: boolean;
    /**
     * An array of tags for this environment.
     * @type {Array<string>}
     * @memberof EnvironmentPost
     */
    tags?: Array<string>;
    /**
     * Determines if this environment requires comments for flag and segment changes.
     * @type {boolean}
     * @memberof EnvironmentPost
     */
    requireComments?: boolean;
    /**
     * Determines if this environment requires confirmation for flag and segment changes.
     * @type {boolean}
     * @memberof EnvironmentPost
     */
    confirmChanges?: boolean;
}
/**
 *
 * @export
 * @interface EvaluationUsageError
 */
export interface EvaluationUsageError {
    /**
     *
     * @type {string}
     * @memberof EvaluationUsageError
     */
    code?: string;
    /**
     *
     * @type {string}
     * @memberof EvaluationUsageError
     */
    message?: string;
}
/**
 *
 * @export
 * @interface Events
 */
export interface Events {
    /**
     *
     * @type {UsageLinks}
     * @memberof Events
     */
    links?: UsageLinks;
}
/**
 *
 * @export
 * @interface Fallthrough
 */
export interface Fallthrough {
    /**
     *
     * @type {number}
     * @memberof Fallthrough
     */
    variation?: number;
    /**
     *
     * @type {Rollout}
     * @memberof Fallthrough
     */
    rollout?: Rollout;
}
/**
 *
 * @export
 * @interface FeatureFlag
 */
export interface FeatureFlag {
    /**
     *
     * @type {string}
     * @memberof FeatureFlag
     */
    key?: string;
    /**
     * Name of the feature flag.
     * @type {string}
     * @memberof FeatureFlag
     */
    name?: string;
    /**
     * Description of the feature flag.
     * @type {string}
     * @memberof FeatureFlag
     */
    description?: string;
    /**
     * Whether the feature flag is a boolean flag or multivariate.
     * @type {string}
     * @memberof FeatureFlag
     */
    kind?: string;
    /**
     * A unix epoch time in milliseconds specifying the creation time of this flag.
     * @type {number}
     * @memberof FeatureFlag
     */
    creationDate?: number;
    /**
     *
     * @type {boolean}
     * @memberof FeatureFlag
     */
    includeInSnippet?: boolean;
    /**
     * Whether or not this flag is temporary.
     * @type {boolean}
     * @memberof FeatureFlag
     */
    temporary?: boolean;
    /**
     * The ID of the member that should maintain this flag.
     * @type {string}
     * @memberof FeatureFlag
     */
    maintainerId?: string;
    /**
     * An array of tags for this feature flag.
     * @type {Array<string>}
     * @memberof FeatureFlag
     */
    tags?: Array<string>;
    /**
     * The variations for this feature flag.
     * @type {Array<Variation>}
     * @memberof FeatureFlag
     */
    variations?: Array<Variation>;
    /**
     * An array goals from all environments associated with this feature flag
     * @type {Array<string>}
     * @memberof FeatureFlag
     */
    goalIds?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof FeatureFlag
     */
    _version?: number;
    /**
     * A mapping of keys to CustomProperty entries.
     * @type {{ [key: string]: CustomProperty; }}
     * @memberof FeatureFlag
     */
    customProperties?: {
        [key: string]: CustomProperty;
    };
    /**
     *
     * @type {Links}
     * @memberof FeatureFlag
     */
    _links?: Links;
    /**
     *
     * @type {Member}
     * @memberof FeatureFlag
     */
    _maintainer?: Member;
    /**
     *
     * @type {{ [key: string]: FeatureFlagConfig; }}
     * @memberof FeatureFlag
     */
    environments?: {
        [key: string]: FeatureFlagConfig;
    };
    /**
     * A unix epoch time in milliseconds specifying the archived time of this flag.
     * @type {number}
     * @memberof FeatureFlag
     */
    archivedDate?: number;
    /**
     * Whether or not this flag is archived.
     * @type {boolean}
     * @memberof FeatureFlag
     */
    archived?: boolean;
    /**
     *
     * @type {ClientSideAvailability}
     * @memberof FeatureFlag
     */
    clientSideAvailability?: ClientSideAvailability;
    /**
     *
     * @type {Defaults}
     * @memberof FeatureFlag
     */
    defaults?: Defaults;
}
/**
 *
 * @export
 * @interface FeatureFlagConfig
 */
export interface FeatureFlagConfig {
    /**
     *
     * @type {boolean}
     * @memberof FeatureFlagConfig
     */
    on?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof FeatureFlagConfig
     */
    archived?: boolean;
    /**
     *
     * @type {string}
     * @memberof FeatureFlagConfig
     */
    salt?: string;
    /**
     *
     * @type {string}
     * @memberof FeatureFlagConfig
     */
    sel?: string;
    /**
     *
     * @type {number}
     * @memberof FeatureFlagConfig
     */
    lastModified?: number;
    /**
     *
     * @type {number}
     * @memberof FeatureFlagConfig
     */
    version?: number;
    /**
     *
     * @type {Array<Target>}
     * @memberof FeatureFlagConfig
     */
    targets?: Array<Target>;
    /**
     *
     * @type {Array<Rule>}
     * @memberof FeatureFlagConfig
     */
    rules?: Array<Rule>;
    /**
     *
     * @type {Fallthrough}
     * @memberof FeatureFlagConfig
     */
    fallthrough?: Fallthrough;
    /**
     *
     * @type {number}
     * @memberof FeatureFlagConfig
     */
    offVariation?: number;
    /**
     *
     * @type {Array<Prerequisite>}
     * @memberof FeatureFlagConfig
     */
    prerequisites?: Array<Prerequisite>;
    /**
     * Set to true to send detailed event information for this flag.
     * @type {boolean}
     * @memberof FeatureFlagConfig
     */
    trackEvents?: boolean;
    /**
     * Set to true to send detailed event information when targeting is enabled but no individual targeting rule is matched.
     * @type {boolean}
     * @memberof FeatureFlagConfig
     */
    trackEventsFallthrough?: boolean;
}
/**
 *
 * @export
 * @interface FeatureFlagCopyObject
 */
export interface FeatureFlagCopyObject {
    /**
     * The environment key to be used.
     * @type {string}
     * @memberof FeatureFlagCopyObject
     */
    key: string;
    /**
     * If the latest version of the flag matches provided version it will copy, otherwise it will return a conflict.
     * @type {number}
     * @memberof FeatureFlagCopyObject
     */
    currentVersion?: number;
}
/**
 *
 * @export
 * @interface FeatureFlagScheduledChange
 */
export interface FeatureFlagScheduledChange {
    /**
     * A unix epoch time in milliseconds specifying the date the scheduled changes will be applied
     * @type {number}
     * @memberof FeatureFlagScheduledChange
     */
    executionDate?: number;
    /**
     *
     * @type {number}
     * @memberof FeatureFlagScheduledChange
     */
    _version?: number;
    /**
     *
     * @type {string}
     * @memberof FeatureFlagScheduledChange
     */
    _id?: string;
    /**
     *
     * @type {Array<object>}
     * @memberof FeatureFlagScheduledChange
     */
    instructions?: Array<object>;
}
/**
 *
 * @export
 * @interface FeatureFlagScheduledChanges
 */
export interface FeatureFlagScheduledChanges {
    /**
     *
     * @type {Links}
     * @memberof FeatureFlagScheduledChanges
     */
    _links?: Links;
    /**
     *
     * @type {Array<FeatureFlagScheduledChange>}
     * @memberof FeatureFlagScheduledChanges
     */
    items?: Array<FeatureFlagScheduledChange>;
}
/**
 *
 * @export
 * @interface FeatureFlagScheduledChangesConflicts
 */
export interface FeatureFlagScheduledChangesConflicts {
    /**
     *
     * @type {Array<FeatureFlagScheduledChangesConflictsInstructions>}
     * @memberof FeatureFlagScheduledChangesConflicts
     */
    instructions?: Array<FeatureFlagScheduledChangesConflictsInstructions>;
}
/**
 *
 * @export
 * @interface FeatureFlagScheduledChangesConflictsInstructions
 */
export interface FeatureFlagScheduledChangesConflictsInstructions {
    /**
     * The name of the modification you would like to perform on a resource.
     * @type {string}
     * @memberof FeatureFlagScheduledChangesConflictsInstructions
     */
    kind?: string;
    /**
     *
     * @type {Array<ScheduledChangesFeatureFlagConflict>}
     * @memberof FeatureFlagScheduledChangesConflictsInstructions
     */
    conflicts?: Array<ScheduledChangesFeatureFlagConflict>;
}
/**
 *
 * @export
 * @interface FeatureFlagStatus
 */
export interface FeatureFlagStatus {
    /**
     * | Name     | Description | | --------:| ----------- | | new      | the feature flag was created within the last 7 days, and has not been requested yet | | active   | the feature flag was requested by your servers or clients within the last 7 days | | inactive | the feature flag was created more than 7 days ago, and hasn\'t been requested by your servers or clients within the past 7 days | | launched | one variation of the feature flag has been rolled out to all your users for at least 7 days |
     * @type {string}
     * @memberof FeatureFlagStatus
     */
    name?: FeatureFlagStatusNameEnum;
    /**
     *
     * @type {string}
     * @memberof FeatureFlagStatus
     */
    lastRequested?: string;
    /**
     *
     * @type {object}
     * @memberof FeatureFlagStatus
     */
    _default?: object;
    /**
     *
     * @type {Links}
     * @memberof FeatureFlagStatus
     */
    _links?: Links;
}
/**
    * @export
    * @enum {string}
    */
export declare enum FeatureFlagStatusNameEnum {
    New = "new",
    Active = "active",
    Inactive = "inactive",
    Launched = "launched"
}
/**
 *
 * @export
 * @interface FeatureFlagStatusAcrossEnvironments
 */
export interface FeatureFlagStatusAcrossEnvironments {
    /**
     *
     * @type {Links}
     * @memberof FeatureFlagStatusAcrossEnvironments
     */
    _links?: Links;
    /**
     *
     * @type {string}
     * @memberof FeatureFlagStatusAcrossEnvironments
     */
    key?: string;
    /**
     *
     * @type {{ [key: string]: FeatureFlagStatusForQueriedEnvironment; }}
     * @memberof FeatureFlagStatusAcrossEnvironments
     */
    environments?: {
        [key: string]: FeatureFlagStatusForQueriedEnvironment;
    };
}
/**
 *
 * @export
 * @interface FeatureFlagStatusForQueriedEnvironment
 */
export interface FeatureFlagStatusForQueriedEnvironment {
    /**
     * | Name     | Description | | --------:| ----------- | | new      | the feature flag was created within the last 7 days, and has not been requested yet | | active   | the feature flag was requested by your servers or clients within the last 7 days | | inactive | the feature flag was created more than 7 days ago, and hasn\'t been requested by your servers or clients within the past 7 days | | launched | one variation of the feature flag has been rolled out to all your users for at least 7 days |
     * @type {string}
     * @memberof FeatureFlagStatusForQueriedEnvironment
     */
    name?: FeatureFlagStatusForQueriedEnvironmentNameEnum;
    /**
     *
     * @type {string}
     * @memberof FeatureFlagStatusForQueriedEnvironment
     */
    lastRequested?: string;
    /**
     *
     * @type {object}
     * @memberof FeatureFlagStatusForQueriedEnvironment
     */
    _default?: object;
}
/**
    * @export
    * @enum {string}
    */
export declare enum FeatureFlagStatusForQueriedEnvironmentNameEnum {
    New = "new",
    Active = "active",
    Inactive = "inactive",
    Launched = "launched"
}
/**
 *
 * @export
 * @interface FeatureFlagStatuses
 */
export interface FeatureFlagStatuses {
    /**
     *
     * @type {Links}
     * @memberof FeatureFlagStatuses
     */
    _links?: Links;
    /**
     *
     * @type {Array<FeatureFlagStatus>}
     * @memberof FeatureFlagStatuses
     */
    items?: Array<FeatureFlagStatus>;
}
/**
 *
 * @export
 * @interface FeatureFlags
 */
export interface FeatureFlags {
    /**
     *
     * @type {Links}
     * @memberof FeatureFlags
     */
    _links?: Links;
    /**
     *
     * @type {Array<FeatureFlag>}
     * @memberof FeatureFlags
     */
    items?: Array<FeatureFlag>;
    /**
     *
     * @type {number}
     * @memberof FeatureFlags
     */
    totalCount?: number;
}
/**
 *
 * @export
 * @interface FlagListItem
 */
export interface FlagListItem {
    /**
     *
     * @type {string}
     * @memberof FlagListItem
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof FlagListItem
     */
    key?: string;
    /**
     *
     * @type {Links}
     * @memberof FlagListItem
     */
    _links?: Links;
    /**
     *
     * @type {Site}
     * @memberof FlagListItem
     */
    _site?: Site;
}
/**
 *
 * @export
 * @interface HierarchicalLinks
 */
export interface HierarchicalLinks {
    /**
     *
     * @type {Link}
     * @memberof HierarchicalLinks
     */
    parent?: Link;
    /**
     *
     * @type {Link}
     * @memberof HierarchicalLinks
     */
    self?: Link;
}
/**
 *
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     *
     * @type {string}
     * @memberof InlineObject
     */
    email: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject
     */
    lastName?: string;
    /**
     *
     * @type {Role}
     * @memberof InlineObject
     */
    role?: Role;
    /**
     *
     * @type {Array<string>}
     * @memberof InlineObject
     */
    customRoles?: Array<string>;
    /**
     *
     * @type {Array<Statement>}
     * @memberof InlineObject
     */
    inlineRole?: Array<Statement>;
}
/**
 *
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * A human-friendly name for the feature flag. Remember to note if this flag is intended to be temporary or permanent.
     * @type {string}
     * @memberof InlineObject1
     */
    name: string;
    /**
     * A unique key that will be used to reference the flag in your code.
     * @type {string}
     * @memberof InlineObject1
     */
    key: string;
    /**
     * A description of the feature flag.
     * @type {string}
     * @memberof InlineObject1
     */
    description?: string;
    /**
     * An array of possible variations for the flag.
     * @type {Array<Variation>}
     * @memberof InlineObject1
     */
    variations: Array<Variation>;
    /**
     * Whether or not the flag is a temporary flag.
     * @type {boolean}
     * @memberof InlineObject1
     */
    temporary?: boolean;
    /**
     * Tags for the feature flag.
     * @type {Array<string>}
     * @memberof InlineObject1
     */
    tags?: Array<string>;
    /**
     * Whether or not this flag should be made available to the client-side JavaScript SDK.
     * @type {boolean}
     * @memberof InlineObject1
     */
    includeInSnippet?: boolean;
    /**
     *
     * @type {ClientSideAvailability}
     * @memberof InlineObject1
     */
    clientSideAvailability?: ClientSideAvailability;
    /**
     *
     * @type {Defaults}
     * @memberof InlineObject1
     */
    defaults?: Defaults;
}
/**
 *
 * @export
 * @interface InlineObject10
 */
export interface InlineObject10 {
    /**
     * A human-friendly name for the access token
     * @type {string}
     * @memberof InlineObject10
     */
    name?: string;
    /**
     * The name of a built-in role for the token
     * @type {string}
     * @memberof InlineObject10
     */
    role?: string;
    /**
     * A list of custom role IDs to use as access limits for the access token
     * @type {Array<string>}
     * @memberof InlineObject10
     */
    customRoleIds?: Array<string>;
    /**
     *
     * @type {Array<Statement>}
     * @memberof InlineObject10
     */
    inlineRole?: Array<Statement>;
    /**
     * Whether the token will be a service token https://docs.launchdarkly.com/home/account-security/api-access-tokens#service-tokens
     * @type {boolean}
     * @memberof InlineObject10
     */
    serviceToken?: boolean;
    /**
     * The default API version for this token
     * @type {number}
     * @memberof InlineObject10
     */
    defaultApiVersion?: number;
}
/**
 *
 * @export
 * @interface InlineObject11
 */
export interface InlineObject11 {
    /**
     * A human-friendly name for the relay proxy configuration
     * @type {string}
     * @memberof InlineObject11
     */
    name?: string;
    /**
     *
     * @type {Array<Policy>}
     * @memberof InlineObject11
     */
    policy?: Array<Policy>;
}
/**
 *
 * @export
 * @interface InlineObject12
 */
export interface InlineObject12 {
    /**
     * A human-readable name for your subscription configuration.
     * @type {string}
     * @memberof InlineObject12
     */
    name: string;
    /**
     *
     * @type {Array<Statement>}
     * @memberof InlineObject12
     */
    statements?: Array<Statement>;
    /**
     * Integration-specific configuration fields.
     * @type {object}
     * @memberof InlineObject12
     */
    config: object;
    /**
     * Whether the integration subscription is active or not.
     * @type {boolean}
     * @memberof InlineObject12
     */
    on?: boolean;
    /**
     * Tags for the integration subscription.
     * @type {Array<string>}
     * @memberof InlineObject12
     */
    tags?: Array<string>;
}
/**
 *
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     *
     * @type {string}
     * @memberof InlineObject2
     */
    comment?: string;
    /**
     *
     * @type {Array<PatchOperation>}
     * @memberof InlineObject2
     */
    patch?: Array<PatchOperation>;
}
/**
 *
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
    /**
     *
     * @type {FeatureFlagCopyObject}
     * @memberof InlineObject3
     */
    source?: FeatureFlagCopyObject;
    /**
     *
     * @type {FeatureFlagCopyObject}
     * @memberof InlineObject3
     */
    target?: FeatureFlagCopyObject;
    /**
     * comment will be included in audit log item for change.
     * @type {string}
     * @memberof InlineObject3
     */
    comment?: string;
    /**
     * Define the parts of the flag configuration that will be copied.
     * @type {Array<CopyActions>}
     * @memberof InlineObject3
     */
    includedActions?: Array<CopyActions>;
    /**
     * Define the parts of the flag configuration that will not be copied.
     * @type {Array<CopyActions>}
     * @memberof InlineObject3
     */
    excludedActions?: Array<CopyActions>;
}
/**
 *
 * @export
 * @interface InlineObject4
 */
export interface InlineObject4 {
    /**
     * A human-friendly name for the user segment.
     * @type {string}
     * @memberof InlineObject4
     */
    name: string;
    /**
     * A unique key that will be used to reference the user segment in feature flags.
     * @type {string}
     * @memberof InlineObject4
     */
    key: string;
    /**
     * A description for the user segment.
     * @type {string}
     * @memberof InlineObject4
     */
    description?: string;
    /**
     * Controls whether this segment can support unlimited numbers of users. Requires the beta API and additional setup. Include/exclude lists in this payload are not used in unbounded segments.
     * @type {boolean}
     * @memberof InlineObject4
     */
    unbounded?: boolean;
    /**
     * Tags for the user segment.
     * @type {Array<string>}
     * @memberof InlineObject4
     */
    tags?: Array<string>;
}
/**
 *
 * @export
 * @interface InlineObject5
 */
export interface InlineObject5 {
    /**
     *
     * @type {UnboundedSegmentTargetChanges}
     * @memberof InlineObject5
     */
    included?: UnboundedSegmentTargetChanges;
    /**
     *
     * @type {UnboundedSegmentTargetChanges}
     * @memberof InlineObject5
     */
    excluded?: UnboundedSegmentTargetChanges;
}
/**
 *
 * @export
 * @interface InlineObject6
 */
export interface InlineObject6 {
    /**
     * The variation value to set for the user. Must match the variation type of the flag.
     * @type {boolean}
     * @memberof InlineObject6
     */
    setting?: boolean;
}
/**
 *
 * @export
 * @interface InlineObject7
 */
export interface InlineObject7 {
    /**
     * The URL of the remote webhook.
     * @type {string}
     * @memberof InlineObject7
     */
    url: string;
    /**
     * If sign is true, and the secret attribute is omitted, LaunchDarkly will automatically generate a secret for you.
     * @type {string}
     * @memberof InlineObject7
     */
    secret?: string;
    /**
     * If sign is false, the webhook will not include a signature header, and the secret can be omitted.
     * @type {boolean}
     * @memberof InlineObject7
     */
    sign: boolean;
    /**
     * Whether this webhook is enabled or not.
     * @type {boolean}
     * @memberof InlineObject7
     */
    on: boolean;
    /**
     * The name of the webhook.
     * @type {string}
     * @memberof InlineObject7
     */
    name?: string;
    /**
     *
     * @type {Array<Statement>}
     * @memberof InlineObject7
     */
    statements?: Array<Statement>;
    /**
     * Tags for the webhook.
     * @type {Array<string>}
     * @memberof InlineObject7
     */
    tags?: Array<string>;
}
/**
 *
 * @export
 * @interface InlineObject8
 */
export interface InlineObject8 {
    /**
     * Name of the custom role.
     * @type {string}
     * @memberof InlineObject8
     */
    name: string;
    /**
     * Description of the custom role.
     * @type {string}
     * @memberof InlineObject8
     */
    description?: string;
    /**
     * The 20-hexdigit id or the key for a custom role.
     * @type {string}
     * @memberof InlineObject8
     */
    key: string;
    /**
     *
     * @type {Array<Policy>}
     * @memberof InlineObject8
     */
    policy: Array<Policy>;
}
/**
 *
 * @export
 * @interface InlineObject9
 */
export interface InlineObject9 {
    /**
     * A human-readable name for your data export destination.
     * @type {string}
     * @memberof InlineObject9
     */
    name: string;
    /**
     * The data export destination type. Available choices are kinesis, google-pubsub, mparticle, or segment.
     * @type {string}
     * @memberof InlineObject9
     */
    kind: InlineObject9KindEnum;
    /**
     * destination-specific configuration.
     * @type {object}
     * @memberof InlineObject9
     */
    config: object;
    /**
     * Whether the data export destination is on or not.
     * @type {boolean}
     * @memberof InlineObject9
     */
    on?: boolean;
}
/**
    * @export
    * @enum {string}
    */
export declare enum InlineObject9KindEnum {
    GooglePubsub = "google-pubsub",
    Kinesis = "kinesis",
    Mparticle = "mparticle",
    Segment = "segment"
}
/**
 *
 * @export
 * @interface Integration
 */
export interface Integration {
    /**
     *
     * @type {IntegrationLinks}
     * @memberof Integration
     */
    _links?: IntegrationLinks;
    /**
     *
     * @type {Array<IntegrationSubscription>}
     * @memberof Integration
     */
    items?: Array<IntegrationSubscription>;
}
/**
 *
 * @export
 * @interface IntegrationLinks
 */
export interface IntegrationLinks {
    /**
     *
     * @type {Link}
     * @memberof IntegrationLinks
     */
    self?: Link;
}
/**
 *
 * @export
 * @interface IntegrationSubscription
 */
export interface IntegrationSubscription {
    /**
     *
     * @type {HierarchicalLinks}
     * @memberof IntegrationSubscription
     */
    _links?: HierarchicalLinks;
    /**
     * The unique resource id.
     * @type {string}
     * @memberof IntegrationSubscription
     */
    _id?: string;
    /**
     * The type of integration associated with this configuration.
     * @type {string}
     * @memberof IntegrationSubscription
     */
    kind?: string;
    /**
     * The user-defined name associated with this configuration.
     * @type {string}
     * @memberof IntegrationSubscription
     */
    name?: string;
    /**
     * A key-value mapping of configuration fields.
     * @type {object}
     * @memberof IntegrationSubscription
     */
    config?: object;
    /**
     *
     * @type {Array<Statement>}
     * @memberof IntegrationSubscription
     */
    statements?: Array<Statement>;
    /**
     * Whether or not the integration is currently active.
     * @type {boolean}
     * @memberof IntegrationSubscription
     */
    on?: boolean;
    /**
     * An array of tags for this integration configuration.
     * @type {Array<string>}
     * @memberof IntegrationSubscription
     */
    tags?: Array<string>;
    /**
     *
     * @type {IntegrationSubscriptionStatus}
     * @memberof IntegrationSubscription
     */
    _status?: IntegrationSubscriptionStatus;
}
/**
 *
 * @export
 * @interface IntegrationSubscriptionStatus
 */
export interface IntegrationSubscriptionStatus {
    /**
     *
     * @type {number}
     * @memberof IntegrationSubscriptionStatus
     */
    successCount?: number;
    /**
     * A unix epoch time in milliseconds specifying the last time this integration was successfully used.
     * @type {number}
     * @memberof IntegrationSubscriptionStatus
     */
    lastSuccess?: number;
    /**
     *
     * @type {number}
     * @memberof IntegrationSubscriptionStatus
     */
    errorCount?: number;
}
/**
 *
 * @export
 * @interface Integrations
 */
export interface Integrations {
    /**
     * A mapping of integration types to their respective API endpoints.
     * @type {object}
     * @memberof Integrations
     */
    _links?: object;
    /**
     *
     * @type {Array<IntegrationSubscription>}
     * @memberof Integrations
     */
    items?: Array<IntegrationSubscription>;
}
/**
 *
 * @export
 * @interface Link
 */
export interface Link {
    /**
     *
     * @type {string}
     * @memberof Link
     */
    href?: string;
    /**
     *
     * @type {string}
     * @memberof Link
     */
    type?: string;
}
/**
 *
 * @export
 * @interface Links
 */
export interface Links {
    /**
     *
     * @type {Link}
     * @memberof Links
     */
    self?: Link;
    /**
     *
     * @type {Link}
     * @memberof Links
     */
    next?: Link;
}
/**
 *
 * @export
 * @interface MAU
 */
export interface MAU {
    /**
     *
     * @type {UsageLinks}
     * @memberof MAU
     */
    _links?: UsageLinks;
    /**
     *
     * @type {Array<StreamBySDKLinksMetadata>}
     * @memberof MAU
     */
    metadata?: Array<StreamBySDKLinksMetadata>;
    /**
     *
     * @type {Array<StreamUsageSeries>}
     * @memberof MAU
     */
    series?: Array<StreamUsageSeries>;
}
/**
 *
 * @export
 * @interface MAUbyCategory
 */
export interface MAUbyCategory {
    /**
     *
     * @type {StreamBySDKLinks}
     * @memberof MAUbyCategory
     */
    _links?: StreamBySDKLinks;
    /**
     *
     * @type {Array<object>}
     * @memberof MAUbyCategory
     */
    metadata?: Array<object>;
    /**
     *
     * @type {Array<StreamUsageSeries>}
     * @memberof MAUbyCategory
     */
    series?: Array<StreamUsageSeries>;
}
/**
 *
 * @export
 * @interface Member
 */
export interface Member {
    /**
     *
     * @type {Links}
     * @memberof Member
     */
    _links?: Links;
    /**
     * The unique resource id.
     * @type {string}
     * @memberof Member
     */
    _id?: string;
    /**
     *
     * @type {Role}
     * @memberof Member
     */
    role?: Role;
    /**
     *
     * @type {string}
     * @memberof Member
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof Member
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof Member
     */
    lastName?: string;
    /**
     *
     * @type {boolean}
     * @memberof Member
     */
    _verified?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Member
     */
    _pendingInvite?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Member
     */
    isBeta?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof Member
     */
    customRoles?: Array<string>;
}
/**
 *
 * @export
 * @interface Members
 */
export interface Members {
    /**
     *
     * @type {Links}
     * @memberof Members
     */
    _links?: Links;
    /**
     *
     * @type {Array<Member>}
     * @memberof Members
     */
    items?: Array<Member>;
    /**
     *
     * @type {number}
     * @memberof Members
     */
    totalCount?: number;
}
/**
 *
 * @export
 * @interface PatchOperation
 */
export interface PatchOperation {
    /**
     *
     * @type {string}
     * @memberof PatchOperation
     */
    op: string;
    /**
     *
     * @type {string}
     * @memberof PatchOperation
     */
    path: string;
    /**
     *
     * @type {object}
     * @memberof PatchOperation
     */
    value: object;
}
/**
 *
 * @export
 * @interface Policy
 */
export interface Policy {
    /**
     *
     * @type {Array<string>}
     * @memberof Policy
     */
    resources?: Array<string>;
    /**
     * Targeted resource will be those resources NOT in this list. The \"resources`\" field must be empty to use this field.
     * @type {Array<string>}
     * @memberof Policy
     */
    notResources?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof Policy
     */
    actions?: Array<string>;
    /**
     * Targeted actions will be those actions NOT in this list. The \"actions\" field must be empty to use this field.
     * @type {Array<string>}
     * @memberof Policy
     */
    notActions?: Array<string>;
    /**
     * Effect of the policy - allow or deny.
     * @type {string}
     * @memberof Policy
     */
    effect?: string;
}
/**
 *
 * @export
 * @interface Prerequisite
 */
export interface Prerequisite {
    /**
     *
     * @type {string}
     * @memberof Prerequisite
     */
    key?: string;
    /**
     *
     * @type {number}
     * @memberof Prerequisite
     */
    variation?: number;
}
/**
 *
 * @export
 * @interface Project
 */
export interface Project {
    /**
     *
     * @type {Links}
     * @memberof Project
     */
    _links?: Links;
    /**
     * The unique resource id.
     * @type {string}
     * @memberof Project
     */
    _id?: string;
    /**
     *
     * @type {string}
     * @memberof Project
     */
    key?: string;
    /**
     *
     * @type {string}
     * @memberof Project
     */
    name?: string;
    /**
     *
     * @type {boolean}
     * @memberof Project
     */
    includeInSnippetByDefault?: boolean;
    /**
     *
     * @type {Array<Environment>}
     * @memberof Project
     */
    environments?: Array<Environment>;
    /**
     * An array of tags for this project.
     * @type {Array<string>}
     * @memberof Project
     */
    tags?: Array<string>;
    /**
     *
     * @type {ClientSideAvailability}
     * @memberof Project
     */
    defaultClientSideAvailability?: ClientSideAvailability;
}
/**
 *
 * @export
 * @interface Projects
 */
export interface Projects {
    /**
     *
     * @type {Links}
     * @memberof Projects
     */
    _links?: Links;
    /**
     *
     * @type {Array<Project>}
     * @memberof Projects
     */
    items?: Array<Project>;
}
/**
 *
 * @export
 * @interface RelayProxyConfig
 */
export interface RelayProxyConfig {
    /**
     * The unique resource id.
     * @type {string}
     * @memberof RelayProxyConfig
     */
    _id: string;
    /**
     *
     * @type {Member}
     * @memberof RelayProxyConfig
     */
    _creator: Member;
    /**
     * A human-friendly name for the relay proxy configuration
     * @type {string}
     * @memberof RelayProxyConfig
     */
    name: string;
    /**
     *
     * @type {Array<Policy>}
     * @memberof RelayProxyConfig
     */
    policy: Array<Policy>;
    /**
     * Full secret key. Only included if creating or resetting the relay proxy configuration
     * @type {string}
     * @memberof RelayProxyConfig
     */
    fullKey?: string;
    /**
     * The last 4 digits of the unique secret key for this relay proxy configuration
     * @type {string}
     * @memberof RelayProxyConfig
     */
    displayKey: string;
    /**
     * A unix epoch time in milliseconds specifying the creation time of this relay proxy configuration
     * @type {number}
     * @memberof RelayProxyConfig
     */
    creationDate: number;
    /**
     * A unix epoch time in milliseconds specifying the last time this relay proxy configuration was modified
     * @type {number}
     * @memberof RelayProxyConfig
     */
    lastModified: number;
}
/**
 *
 * @export
 * @interface RelayProxyConfigs
 */
export interface RelayProxyConfigs {
    /**
     *
     * @type {Array<RelayProxyConfig>}
     * @memberof RelayProxyConfigs
     */
    items?: Array<RelayProxyConfig>;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum Role {
    Writer = "writer",
    Reader = "reader",
    Admin = "admin",
    Owner = "owner"
}
/**
 *
 * @export
 * @interface Rollout
 */
export interface Rollout {
    /**
     *
     * @type {string}
     * @memberof Rollout
     */
    bucketBy?: string;
    /**
     *
     * @type {Array<WeightedVariation>}
     * @memberof Rollout
     */
    variations?: Array<WeightedVariation>;
}
/**
 *
 * @export
 * @interface Rule
 */
export interface Rule {
    /**
     *
     * @type {string}
     * @memberof Rule
     */
    _id?: string;
    /**
     *
     * @type {number}
     * @memberof Rule
     */
    variation?: number;
    /**
     *
     * @type {boolean}
     * @memberof Rule
     */
    trackEvents?: boolean;
    /**
     *
     * @type {Rollout}
     * @memberof Rule
     */
    rollout?: Rollout;
    /**
     *
     * @type {Array<Clause>}
     * @memberof Rule
     */
    clauses?: Array<Clause>;
}
/**
 *
 * @export
 * @interface ScheduledChangesFeatureFlagConflict
 */
export interface ScheduledChangesFeatureFlagConflict {
    /**
     * Feature flag scheduled change id this change will conflict with
     * @type {string}
     * @memberof ScheduledChangesFeatureFlagConflict
     */
    _id?: string;
    /**
     * Feature flag scheduled change conflict reason
     * @type {string}
     * @memberof ScheduledChangesFeatureFlagConflict
     */
    reason?: string;
}
/**
 *
 * @export
 * @interface SemanticPatchOperation
 */
export interface SemanticPatchOperation {
    /**
     *
     * @type {string}
     * @memberof SemanticPatchOperation
     */
    comment?: string;
    /**
     *
     * @type {Array<object>}
     * @memberof SemanticPatchOperation
     */
    instructions: Array<object>;
}
/**
 *
 * @export
 * @interface Site
 */
export interface Site {
    /**
     *
     * @type {string}
     * @memberof Site
     */
    href?: string;
    /**
     *
     * @type {string}
     * @memberof Site
     */
    type?: string;
}
/**
 *
 * @export
 * @interface Statement
 */
export interface Statement {
    /**
     *
     * @type {Array<string>}
     * @memberof Statement
     */
    resources?: Array<string>;
    /**
     * Targeted resource will be those resources NOT in this list. The \"resources`\" field must be empty to use this field.
     * @type {Array<string>}
     * @memberof Statement
     */
    notResources?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof Statement
     */
    actions?: Array<string>;
    /**
     * Targeted actions will be those actions NOT in this list. The \"actions\" field must be empty to use this field.
     * @type {Array<string>}
     * @memberof Statement
     */
    notActions?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof Statement
     */
    effect?: StatementEffectEnum;
}
/**
    * @export
    * @enum {string}
    */
export declare enum StatementEffectEnum {
    Allow = "allow",
    Deny = "deny"
}
/**
 *
 * @export
 * @interface Stream
 */
export interface Stream {
    /**
     *
     * @type {StreamUsageLinks}
     * @memberof Stream
     */
    _links?: StreamUsageLinks;
    /**
     *
     * @type {Array<StreamUsageMetadata>}
     * @memberof Stream
     */
    metadata?: Array<StreamUsageMetadata>;
    /**
     *
     * @type {Array<StreamUsageSeries>}
     * @memberof Stream
     */
    series?: Array<StreamUsageSeries>;
}
/**
 *
 * @export
 * @interface StreamBySDK
 */
export interface StreamBySDK {
    /**
     *
     * @type {StreamBySDKLinks}
     * @memberof StreamBySDK
     */
    _links?: StreamBySDKLinks;
    /**
     *
     * @type {Array<StreamBySDKLinksMetadata>}
     * @memberof StreamBySDK
     */
    metadata?: Array<StreamBySDKLinksMetadata>;
    /**
     *
     * @type {Array<StreamUsageSeries>}
     * @memberof StreamBySDK
     */
    series?: Array<StreamUsageSeries>;
}
/**
 *
 * @export
 * @interface StreamBySDKLinks
 */
export interface StreamBySDKLinks {
    /**
     *
     * @type {Link}
     * @memberof StreamBySDKLinks
     */
    parent?: Link;
    /**
     *
     * @type {Link}
     * @memberof StreamBySDKLinks
     */
    self?: Link;
}
/**
 *
 * @export
 * @interface StreamBySDKLinksMetadata
 */
export interface StreamBySDKLinksMetadata {
    /**
     *
     * @type {string}
     * @memberof StreamBySDKLinksMetadata
     */
    sdk?: string;
    /**
     *
     * @type {string}
     * @memberof StreamBySDKLinksMetadata
     */
    version?: string;
    /**
     *
     * @type {string}
     * @memberof StreamBySDKLinksMetadata
     */
    source?: string;
}
/**
 *
 * @export
 * @interface StreamLinks
 */
export interface StreamLinks {
    /**
     *
     * @type {Link}
     * @memberof StreamLinks
     */
    parent?: Link;
    /**
     *
     * @type {Link}
     * @memberof StreamLinks
     */
    self?: Link;
    /**
     * Links to endpoints that are in the request path.
     * @type {Array<Link>}
     * @memberof StreamLinks
     */
    subseries?: Array<Link>;
}
/**
 *
 * @export
 * @interface StreamSDKVersion
 */
export interface StreamSDKVersion {
    /**
     *
     * @type {StreamBySDKLinks}
     * @memberof StreamSDKVersion
     */
    _links?: StreamBySDKLinks;
    /**
     *
     * @type {Array<StreamSDKVersionData>}
     * @memberof StreamSDKVersion
     */
    sdkVersions?: Array<StreamSDKVersionData>;
}
/**
 *
 * @export
 * @interface StreamSDKVersionData
 */
export interface StreamSDKVersionData {
    /**
     * The language of the sdk
     * @type {string}
     * @memberof StreamSDKVersionData
     */
    sdk?: string;
    /**
     * The version of the sdk
     * @type {string}
     * @memberof StreamSDKVersionData
     */
    version?: string;
}
/**
 *
 * @export
 * @interface StreamUsageError
 */
export interface StreamUsageError {
    /**
     *
     * @type {string}
     * @memberof StreamUsageError
     */
    code?: string;
    /**
     *
     * @type {string}
     * @memberof StreamUsageError
     */
    message?: string;
}
/**
 *
 * @export
 * @interface StreamUsageLinks
 */
export interface StreamUsageLinks {
    /**
     *
     * @type {Link}
     * @memberof StreamUsageLinks
     */
    parent?: Link;
    /**
     *
     * @type {Link}
     * @memberof StreamUsageLinks
     */
    self?: Link;
    /**
     * The following links that are in the response.
     * @type {Array<Link>}
     * @memberof StreamUsageLinks
     */
    subseries?: Array<Link>;
}
/**
 *
 * @export
 * @interface StreamUsageMetadata
 */
export interface StreamUsageMetadata {
    /**
     * The language of the sdk
     * @type {string}
     * @memberof StreamUsageMetadata
     */
    sdk?: string;
    /**
     * The version of the SDK
     * @type {string}
     * @memberof StreamUsageMetadata
     */
    version?: string;
    /**
     *
     * @type {string}
     * @memberof StreamUsageMetadata
     */
    source?: string;
}
/**
 *
 * @export
 * @interface StreamUsageSeries
 */
export interface StreamUsageSeries {
    /**
     * A key corresponding to a time series data point.
     * @type {number}
     * @memberof StreamUsageSeries
     */
    _0?: number;
    /**
     * A unix epoch time in milliseconds specifying the creation time of this flag.
     * @type {number}
     * @memberof StreamUsageSeries
     */
    time?: number;
}
/**
 *
 * @export
 * @interface Streams
 */
export interface Streams {
    /**
     *
     * @type {StreamUsageLinks}
     * @memberof Streams
     */
    _links?: StreamUsageLinks;
}
/**
 *
 * @export
 * @interface Target
 */
export interface Target {
    /**
     *
     * @type {Array<string>}
     * @memberof Target
     */
    values?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof Target
     */
    variation?: number;
}
/**
 *
 * @export
 * @interface Token
 */
export interface Token {
    /**
     *
     * @type {Links}
     * @memberof Token
     */
    _links?: Links;
    /**
     * The unique resource id.
     * @type {string}
     * @memberof Token
     */
    _id?: string;
    /**
     * The unique resource id.
     * @type {string}
     * @memberof Token
     */
    ownerId?: string;
    /**
     * The unique resource id.
     * @type {string}
     * @memberof Token
     */
    memberId?: string;
    /**
     *
     * @type {Member}
     * @memberof Token
     */
    _member?: Member;
    /**
     * A unix epoch time in milliseconds specifying the creation time of this access token.
     * @type {number}
     * @memberof Token
     */
    creationDate?: number;
    /**
     * A unix epoch time in milliseconds specifying the last time this access token was modified.
     * @type {number}
     * @memberof Token
     */
    lastModified?: number;
    /**
     * A unix epoch time in milliseconds specifying the last time this access token was used to authorize access to the LaunchDarkly REST API.
     * @type {number}
     * @memberof Token
     */
    lastUsed?: number;
    /**
     * The last 4 digits of the unique secret key for this access token. If creating or resetting the token, this will be the full token secret.
     * @type {string}
     * @memberof Token
     */
    token?: string;
    /**
     * A human-friendly name for the access token
     * @type {string}
     * @memberof Token
     */
    name?: string;
    /**
     * The name of a built-in role for the token
     * @type {string}
     * @memberof Token
     */
    role?: string;
    /**
     * A list of custom role IDs to use as access limits for the access token
     * @type {Array<string>}
     * @memberof Token
     */
    customRoleIds?: Array<string>;
    /**
     *
     * @type {Array<Statement>}
     * @memberof Token
     */
    inlineRole?: Array<Statement>;
    /**
     * Whether the token will be a service token https://docs.launchdarkly.com/home/account-security/api-access-tokens#service-tokens
     * @type {boolean}
     * @memberof Token
     */
    serviceToken?: boolean;
    /**
     * The default API version for this token
     * @type {number}
     * @memberof Token
     */
    defaultApiVersion?: number;
}
/**
 *
 * @export
 * @interface Tokens
 */
export interface Tokens {
    /**
     *
     * @type {Links}
     * @memberof Tokens
     */
    _links?: Links;
    /**
     *
     * @type {Array<Token>}
     * @memberof Tokens
     */
    items?: Array<Token>;
}
/**
 *
 * @export
 * @interface UnboundedSegmentTargetChanges
 */
export interface UnboundedSegmentTargetChanges {
    /**
     * Users to add to this list of targets
     * @type {Array<string>}
     * @memberof UnboundedSegmentTargetChanges
     */
    add?: Array<string>;
    /**
     * Users to remove from this list of targets
     * @type {Array<string>}
     * @memberof UnboundedSegmentTargetChanges
     */
    remove?: Array<string>;
}
/**
 *
 * @export
 * @interface Usage
 */
export interface Usage {
    /**
     *
     * @type {UsageLinks}
     * @memberof Usage
     */
    _links?: UsageLinks;
    /**
     *
     * @type {Array<StreamUsageSeries>}
     * @memberof Usage
     */
    series?: Array<StreamUsageSeries>;
}
/**
 *
 * @export
 * @interface UsageError
 */
export interface UsageError {
    /**
     *
     * @type {string}
     * @memberof UsageError
     */
    message?: string;
}
/**
 *
 * @export
 * @interface UsageLinks
 */
export interface UsageLinks {
    /**
     *
     * @type {Link}
     * @memberof UsageLinks
     */
    parent?: Link;
    /**
     *
     * @type {Link}
     * @memberof UsageLinks
     */
    self?: Link;
    /**
     * The following links that are in the response.
     * @type {Array<Link>}
     * @memberof UsageLinks
     */
    subseries?: Array<Link>;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {string}
     * @memberof User
     */
    key?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    secondary?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    ip?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    country?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    avatar?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    name?: string;
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    anonymous?: boolean;
    /**
     *
     * @type {object}
     * @memberof User
     */
    custom?: object;
}
/**
 *
 * @export
 * @interface UserFlagSetting
 */
export interface UserFlagSetting {
    /**
     *
     * @type {Links}
     * @memberof UserFlagSetting
     */
    _links?: Links;
    /**
     * The most important attribute in the response. The _value is the current setting for the user. For a boolean feature toggle, this will be true, false, or null if there is no defined fallthrough value.
     * @type {boolean}
     * @memberof UserFlagSetting
     */
    _value?: boolean;
    /**
     * The setting attribute indicates whether you\'ve explicitly targeted this user to receive a particular variation. For example, if you have explicitly turned off a feature toggle for a user, setting will be false. A setting of null means that you haven\'t assigned that user to a specific variation.
     * @type {boolean}
     * @memberof UserFlagSetting
     */
    setting?: boolean;
}
/**
 *
 * @export
 * @interface UserFlagSettings
 */
export interface UserFlagSettings {
    /**
     *
     * @type {Links}
     * @memberof UserFlagSettings
     */
    _links?: Links;
    /**
     *
     * @type {{ [key: string]: UserFlagSetting; }}
     * @memberof UserFlagSettings
     */
    items?: {
        [key: string]: UserFlagSetting;
    };
}
/**
 *
 * @export
 * @interface UserRecord
 */
export interface UserRecord {
    /**
     *
     * @type {string}
     * @memberof UserRecord
     */
    lastPing?: string;
    /**
     *
     * @type {string}
     * @memberof UserRecord
     */
    environmentId?: string;
    /**
     * The unique resource id.
     * @type {string}
     * @memberof UserRecord
     */
    ownerId?: string;
    /**
     *
     * @type {User}
     * @memberof UserRecord
     */
    user?: User;
    /**
     *
     * @type {string}
     * @memberof UserRecord
     */
    avatar?: string;
}
/**
 *
 * @export
 * @interface UserSegment
 */
export interface UserSegment {
    /**
     * Unique identifier for the user segment.
     * @type {string}
     * @memberof UserSegment
     */
    key: string;
    /**
     * Name of the user segment.
     * @type {string}
     * @memberof UserSegment
     */
    name: string;
    /**
     * Description of the user segment.
     * @type {string}
     * @memberof UserSegment
     */
    description?: string;
    /**
     * An array of tags for this user segment.
     * @type {Array<string>}
     * @memberof UserSegment
     */
    tags?: Array<string>;
    /**
     * A unix epoch time in milliseconds specifying the creation time of this flag.
     * @type {number}
     * @memberof UserSegment
     */
    creationDate: number;
    /**
     * An array of user keys that are included in this segment.
     * @type {Array<string>}
     * @memberof UserSegment
     */
    included?: Array<string>;
    /**
     * An array of user keys that should not be included in this segment, unless they are also listed in \"included\".
     * @type {Array<string>}
     * @memberof UserSegment
     */
    excluded?: Array<string>;
    /**
     * An array of rules that can cause a user to be included in this segment.
     * @type {Array<UserSegmentRule>}
     * @memberof UserSegment
     */
    rules?: Array<UserSegmentRule>;
    /**
     * Controls whether this segment can support unlimited numbers of users. Requires the beta API and additional setup. Include/exclude lists in this payload are not used in unbounded segments.
     * @type {boolean}
     * @memberof UserSegment
     */
    unbounded?: boolean;
    /**
     *
     * @type {number}
     * @memberof UserSegment
     */
    version?: number;
    /**
     *
     * @type {Links}
     * @memberof UserSegment
     */
    _links?: Links;
    /**
     *
     * @type {Array<FlagListItem>}
     * @memberof UserSegment
     */
    _flags?: Array<FlagListItem>;
}
/**
 *
 * @export
 * @interface UserSegmentRule
 */
export interface UserSegmentRule {
    /**
     *
     * @type {Array<Clause>}
     * @memberof UserSegmentRule
     */
    clauses?: Array<Clause>;
    /**
     *
     * @type {number}
     * @memberof UserSegmentRule
     */
    weight?: number;
    /**
     *
     * @type {string}
     * @memberof UserSegmentRule
     */
    bucketBy?: string;
}
/**
 *
 * @export
 * @interface UserSegments
 */
export interface UserSegments {
    /**
     *
     * @type {Links}
     * @memberof UserSegments
     */
    _links?: Links;
    /**
     *
     * @type {Array<UserSegment>}
     * @memberof UserSegments
     */
    items?: Array<UserSegment>;
}
/**
 *
 * @export
 * @interface UserTargetingExpirationForFlag
 */
export interface UserTargetingExpirationForFlag {
    /**
     * Unix epoch time in milliseconds specifying the expiration date
     * @type {number}
     * @memberof UserTargetingExpirationForFlag
     */
    expirationDate?: number;
    /**
     * the ID of the variation that the user is targeted on a flag
     * @type {string}
     * @memberof UserTargetingExpirationForFlag
     */
    variationId?: string;
    /**
     * Unique identifier for the user
     * @type {string}
     * @memberof UserTargetingExpirationForFlag
     */
    userKey?: string;
    /**
     *
     * @type {string}
     * @memberof UserTargetingExpirationForFlag
     */
    _id?: string;
    /**
     *
     * @type {UserTargetingExpirationResourceIdForFlag}
     * @memberof UserTargetingExpirationForFlag
     */
    _resourceId?: UserTargetingExpirationResourceIdForFlag;
    /**
     *
     * @type {Links}
     * @memberof UserTargetingExpirationForFlag
     */
    _links?: Links;
    /**
     *
     * @type {number}
     * @memberof UserTargetingExpirationForFlag
     */
    _version?: number;
}
/**
 *
 * @export
 * @interface UserTargetingExpirationForFlags
 */
export interface UserTargetingExpirationForFlags {
    /**
     *
     * @type {Links}
     * @memberof UserTargetingExpirationForFlags
     */
    _links?: Links;
    /**
     *
     * @type {Array<UserTargetingExpirationForFlag>}
     * @memberof UserTargetingExpirationForFlags
     */
    items?: Array<UserTargetingExpirationForFlag>;
}
/**
 *
 * @export
 * @interface UserTargetingExpirationForSegment
 */
export interface UserTargetingExpirationForSegment {
    /**
     * Unix epoch time in milliseconds specifying the expiration date
     * @type {number}
     * @memberof UserTargetingExpirationForSegment
     */
    expirationDate?: number;
    /**
     * either the included or excluded variation that the user is targeted on a segment
     * @type {string}
     * @memberof UserTargetingExpirationForSegment
     */
    targetType?: string;
    /**
     * Unique identifier for the user
     * @type {string}
     * @memberof UserTargetingExpirationForSegment
     */
    userKey?: string;
    /**
     *
     * @type {string}
     * @memberof UserTargetingExpirationForSegment
     */
    _id?: string;
    /**
     *
     * @type {UserTargetingExpirationResourceIdForFlag}
     * @memberof UserTargetingExpirationForSegment
     */
    _resourceId?: UserTargetingExpirationResourceIdForFlag;
    /**
     *
     * @type {Links}
     * @memberof UserTargetingExpirationForSegment
     */
    _links?: Links;
    /**
     *
     * @type {number}
     * @memberof UserTargetingExpirationForSegment
     */
    _version?: number;
}
/**
 *
 * @export
 * @interface UserTargetingExpirationOnFlagsForUser
 */
export interface UserTargetingExpirationOnFlagsForUser {
    /**
     *
     * @type {Links}
     * @memberof UserTargetingExpirationOnFlagsForUser
     */
    _links?: Links;
    /**
     *
     * @type {Array<UserTargetingExpirationForFlag>}
     * @memberof UserTargetingExpirationOnFlagsForUser
     */
    items?: Array<UserTargetingExpirationForFlag>;
}
/**
 *
 * @export
 * @interface UserTargetingExpirationResourceIdForFlag
 */
export interface UserTargetingExpirationResourceIdForFlag {
    /**
     *
     * @type {string}
     * @memberof UserTargetingExpirationResourceIdForFlag
     */
    kind?: string;
    /**
     *
     * @type {string}
     * @memberof UserTargetingExpirationResourceIdForFlag
     */
    projectKey?: string;
    /**
     *
     * @type {string}
     * @memberof UserTargetingExpirationResourceIdForFlag
     */
    environmentKey?: string;
    /**
     *
     * @type {string}
     * @memberof UserTargetingExpirationResourceIdForFlag
     */
    flagKey?: string;
    /**
     *
     * @type {string}
     * @memberof UserTargetingExpirationResourceIdForFlag
     */
    key?: string;
}
/**
 *
 * @export
 * @interface Users
 */
export interface Users {
    /**
     *
     * @type {Links}
     * @memberof Users
     */
    _links?: Links;
    /**
     *
     * @type {number}
     * @memberof Users
     */
    totalCount?: number;
    /**
     *
     * @type {Array<UserRecord>}
     * @memberof Users
     */
    items?: Array<UserRecord>;
}
/**
 *
 * @export
 * @interface Variation
 */
export interface Variation {
    /**
     *
     * @type {string}
     * @memberof Variation
     */
    _id?: string;
    /**
     *
     * @type {string}
     * @memberof Variation
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Variation
     */
    description?: string;
    /**
     *
     * @type {object}
     * @memberof Variation
     */
    value: object;
}
/**
 *
 * @export
 * @interface Webhook
 */
export interface Webhook {
    /**
     *
     * @type {Links}
     * @memberof Webhook
     */
    _links?: Links;
    /**
     * The unique resource id.
     * @type {string}
     * @memberof Webhook
     */
    _id?: string;
    /**
     * The URL of the remote webhook.
     * @type {string}
     * @memberof Webhook
     */
    url?: string;
    /**
     * If defined, the webhooks post request will include a X-LD-Signature header whose value will contain an HMAC SHA256 hex digest of the webhook payload, using the secret as the key.
     * @type {string}
     * @memberof Webhook
     */
    secret?: string;
    /**
     * Whether this webhook is enabled or not.
     * @type {boolean}
     * @memberof Webhook
     */
    on?: boolean;
    /**
     * The name of the webhook.
     * @type {string}
     * @memberof Webhook
     */
    name?: string;
    /**
     *
     * @type {Array<Statement>}
     * @memberof Webhook
     */
    statements?: Array<Statement>;
    /**
     * Tags assigned to this webhook.
     * @type {Array<string>}
     * @memberof Webhook
     */
    tags?: Array<string>;
}
/**
 *
 * @export
 * @interface Webhooks
 */
export interface Webhooks {
    /**
     *
     * @type {Links}
     * @memberof Webhooks
     */
    _links?: Links;
    /**
     *
     * @type {Array<Webhook>}
     * @memberof Webhooks
     */
    items?: Array<Webhook>;
}
/**
 *
 * @export
 * @interface WeightedVariation
 */
export interface WeightedVariation {
    /**
     *
     * @type {number}
     * @memberof WeightedVariation
     */
    variation?: number;
    /**
     *
     * @type {number}
     * @memberof WeightedVariation
     */
    weight?: number;
}
/**
 * AccessTokensApi - axios parameter creator
 * @export
 */
export declare const AccessTokensApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete an access token by ID.
     * @param {string} tokenId The access token ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteToken: (tokenId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a single access token by ID.
     * @param {string} tokenId The access token ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getToken: (tokenId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns a list of tokens in the account.
     * @param {boolean} [showAll] If set to true, and the authentication access token has the \&quot;Admin\&quot; role, personal access tokens for all members will be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokens: (showAll?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Modify an access token by ID.
     * @param {string} tokenId The access token ID.
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchToken: (tokenId: string, patchDelta: Array<PatchOperation>, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a new token.
     * @param {InlineObject10} tokenBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postToken: (tokenBody: InlineObject10, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Reset an access token\'s secret key with an optional expiry time for the old key.
     * @param {string} tokenId The access token ID.
     * @param {number} [expiry] An expiration time for the old token key, expressed as a Unix epoch time in milliseconds. By default, the token will expire immediately.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetToken: (tokenId: string, expiry?: number, options?: any) => Promise<RequestArgs>;
};
/**
 * AccessTokensApi - functional programming interface
 * @export
 */
export declare const AccessTokensApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete an access token by ID.
     * @param {string} tokenId The access token ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteToken(tokenId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get a single access token by ID.
     * @param {string} tokenId The access token ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getToken(tokenId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>>;
    /**
     *
     * @summary Returns a list of tokens in the account.
     * @param {boolean} [showAll] If set to true, and the authentication access token has the \&quot;Admin\&quot; role, personal access tokens for all members will be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokens(showAll?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tokens>>;
    /**
     *
     * @summary Modify an access token by ID.
     * @param {string} tokenId The access token ID.
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchToken(tokenId: string, patchDelta: Array<PatchOperation>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>>;
    /**
     *
     * @summary Create a new token.
     * @param {InlineObject10} tokenBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postToken(tokenBody: InlineObject10, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>>;
    /**
     *
     * @summary Reset an access token\'s secret key with an optional expiry time for the old key.
     * @param {string} tokenId The access token ID.
     * @param {number} [expiry] An expiration time for the old token key, expressed as a Unix epoch time in milliseconds. By default, the token will expire immediately.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetToken(tokenId: string, expiry?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>>;
};
/**
 * AccessTokensApi - factory interface
 * @export
 */
export declare const AccessTokensApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Delete an access token by ID.
     * @param {string} tokenId The access token ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteToken(tokenId: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Get a single access token by ID.
     * @param {string} tokenId The access token ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getToken(tokenId: string, options?: any): AxiosPromise<Token>;
    /**
     *
     * @summary Returns a list of tokens in the account.
     * @param {boolean} [showAll] If set to true, and the authentication access token has the \&quot;Admin\&quot; role, personal access tokens for all members will be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokens(showAll?: boolean, options?: any): AxiosPromise<Tokens>;
    /**
     *
     * @summary Modify an access token by ID.
     * @param {string} tokenId The access token ID.
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchToken(tokenId: string, patchDelta: Array<PatchOperation>, options?: any): AxiosPromise<Token>;
    /**
     *
     * @summary Create a new token.
     * @param {InlineObject10} tokenBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postToken(tokenBody: InlineObject10, options?: any): AxiosPromise<Token>;
    /**
     *
     * @summary Reset an access token\'s secret key with an optional expiry time for the old key.
     * @param {string} tokenId The access token ID.
     * @param {number} [expiry] An expiration time for the old token key, expressed as a Unix epoch time in milliseconds. By default, the token will expire immediately.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetToken(tokenId: string, expiry?: number, options?: any): AxiosPromise<Token>;
};
/**
 * AccessTokensApi - object-oriented interface
 * @export
 * @class AccessTokensApi
 * @extends {BaseAPI}
 */
export declare class AccessTokensApi extends BaseAPI {
    /**
     *
     * @summary Delete an access token by ID.
     * @param {string} tokenId The access token ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessTokensApi
     */
    deleteToken(tokenId: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Get a single access token by ID.
     * @param {string} tokenId The access token ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessTokensApi
     */
    getToken(tokenId: string, options?: any): Promise<import("axios").AxiosResponse<Token>>;
    /**
     *
     * @summary Returns a list of tokens in the account.
     * @param {boolean} [showAll] If set to true, and the authentication access token has the \&quot;Admin\&quot; role, personal access tokens for all members will be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessTokensApi
     */
    getTokens(showAll?: boolean, options?: any): Promise<import("axios").AxiosResponse<Tokens>>;
    /**
     *
     * @summary Modify an access token by ID.
     * @param {string} tokenId The access token ID.
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessTokensApi
     */
    patchToken(tokenId: string, patchDelta: Array<PatchOperation>, options?: any): Promise<import("axios").AxiosResponse<Token>>;
    /**
     *
     * @summary Create a new token.
     * @param {InlineObject10} tokenBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessTokensApi
     */
    postToken(tokenBody: InlineObject10, options?: any): Promise<import("axios").AxiosResponse<Token>>;
    /**
     *
     * @summary Reset an access token\'s secret key with an optional expiry time for the old key.
     * @param {string} tokenId The access token ID.
     * @param {number} [expiry] An expiration time for the old token key, expressed as a Unix epoch time in milliseconds. By default, the token will expire immediately.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessTokensApi
     */
    resetToken(tokenId: string, expiry?: number, options?: any): Promise<import("axios").AxiosResponse<Token>>;
}
/**
 * AuditLogApi - axios parameter creator
 * @export
 */
export declare const AuditLogApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get a list of all audit log entries. The query parameters allow you to restrict the returned results by date ranges, resource specifiers, or a full-text search query.
     * @param {number} [before] A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have before this timestamp.
     * @param {number} [after] A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occurred after this timestamp.
     * @param {string} [q] Text to search for. You can search for the full or partial name of the resource involved or full or partial email address of the member who made the change.
     * @param {number} [limit] A limit on the number of audit log entries to be returned, between 1 and 20.
     * @param {string} [spec] A resource specifier, allowing you to filter audit log listings by resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuditLogEntries: (before?: number, after?: number, q?: string, limit?: number, spec?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Use this endpoint to fetch a single audit log entry by its resouce ID.
     * @param {string} resourceId The resource ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuditLogEntry: (resourceId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * AuditLogApi - functional programming interface
 * @export
 */
export declare const AuditLogApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get a list of all audit log entries. The query parameters allow you to restrict the returned results by date ranges, resource specifiers, or a full-text search query.
     * @param {number} [before] A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have before this timestamp.
     * @param {number} [after] A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occurred after this timestamp.
     * @param {string} [q] Text to search for. You can search for the full or partial name of the resource involved or full or partial email address of the member who made the change.
     * @param {number} [limit] A limit on the number of audit log entries to be returned, between 1 and 20.
     * @param {string} [spec] A resource specifier, allowing you to filter audit log listings by resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuditLogEntries(before?: number, after?: number, q?: string, limit?: number, spec?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuditLogEntries>>;
    /**
     *
     * @summary Use this endpoint to fetch a single audit log entry by its resouce ID.
     * @param {string} resourceId The resource ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuditLogEntry(resourceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuditLogEntry>>;
};
/**
 * AuditLogApi - factory interface
 * @export
 */
export declare const AuditLogApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get a list of all audit log entries. The query parameters allow you to restrict the returned results by date ranges, resource specifiers, or a full-text search query.
     * @param {number} [before] A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have before this timestamp.
     * @param {number} [after] A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occurred after this timestamp.
     * @param {string} [q] Text to search for. You can search for the full or partial name of the resource involved or full or partial email address of the member who made the change.
     * @param {number} [limit] A limit on the number of audit log entries to be returned, between 1 and 20.
     * @param {string} [spec] A resource specifier, allowing you to filter audit log listings by resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuditLogEntries(before?: number, after?: number, q?: string, limit?: number, spec?: string, options?: any): AxiosPromise<AuditLogEntries>;
    /**
     *
     * @summary Use this endpoint to fetch a single audit log entry by its resouce ID.
     * @param {string} resourceId The resource ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuditLogEntry(resourceId: string, options?: any): AxiosPromise<AuditLogEntry>;
};
/**
 * AuditLogApi - object-oriented interface
 * @export
 * @class AuditLogApi
 * @extends {BaseAPI}
 */
export declare class AuditLogApi extends BaseAPI {
    /**
     *
     * @summary Get a list of all audit log entries. The query parameters allow you to restrict the returned results by date ranges, resource specifiers, or a full-text search query.
     * @param {number} [before] A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have before this timestamp.
     * @param {number} [after] A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occurred after this timestamp.
     * @param {string} [q] Text to search for. You can search for the full or partial name of the resource involved or full or partial email address of the member who made the change.
     * @param {number} [limit] A limit on the number of audit log entries to be returned, between 1 and 20.
     * @param {string} [spec] A resource specifier, allowing you to filter audit log listings by resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    getAuditLogEntries(before?: number, after?: number, q?: string, limit?: number, spec?: string, options?: any): Promise<import("axios").AxiosResponse<AuditLogEntries>>;
    /**
     *
     * @summary Use this endpoint to fetch a single audit log entry by its resouce ID.
     * @param {string} resourceId The resource ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    getAuditLogEntry(resourceId: string, options?: any): Promise<import("axios").AxiosResponse<AuditLogEntry>>;
}
/**
 * CustomRolesApi - axios parameter creator
 * @export
 */
export declare const CustomRolesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete a custom role by key.
     * @param {string} customRoleKey The custom role key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomRole: (customRoleKey: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get one custom role by key.
     * @param {string} customRoleKey The custom role key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomRole: (customRoleKey: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Return a complete list of custom roles.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomRoles: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Modify a custom role by key.
     * @param {string} customRoleKey The custom role key.
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchCustomRole: (customRoleKey: string, patchDelta: Array<PatchOperation>, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a new custom role.
     * @param {InlineObject8} customRoleBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCustomRole: (customRoleBody: InlineObject8, options?: any) => Promise<RequestArgs>;
};
/**
 * CustomRolesApi - functional programming interface
 * @export
 */
export declare const CustomRolesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete a custom role by key.
     * @param {string} customRoleKey The custom role key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomRole(customRoleKey: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get one custom role by key.
     * @param {string} customRoleKey The custom role key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomRole(customRoleKey: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomRole>>;
    /**
     *
     * @summary Return a complete list of custom roles.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomRoles(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomRoles>>;
    /**
     *
     * @summary Modify a custom role by key.
     * @param {string} customRoleKey The custom role key.
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchCustomRole(customRoleKey: string, patchDelta: Array<PatchOperation>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomRole>>;
    /**
     *
     * @summary Create a new custom role.
     * @param {InlineObject8} customRoleBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCustomRole(customRoleBody: InlineObject8, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomRole>>;
};
/**
 * CustomRolesApi - factory interface
 * @export
 */
export declare const CustomRolesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Delete a custom role by key.
     * @param {string} customRoleKey The custom role key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomRole(customRoleKey: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Get one custom role by key.
     * @param {string} customRoleKey The custom role key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomRole(customRoleKey: string, options?: any): AxiosPromise<CustomRole>;
    /**
     *
     * @summary Return a complete list of custom roles.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomRoles(options?: any): AxiosPromise<CustomRoles>;
    /**
     *
     * @summary Modify a custom role by key.
     * @param {string} customRoleKey The custom role key.
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchCustomRole(customRoleKey: string, patchDelta: Array<PatchOperation>, options?: any): AxiosPromise<CustomRole>;
    /**
     *
     * @summary Create a new custom role.
     * @param {InlineObject8} customRoleBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCustomRole(customRoleBody: InlineObject8, options?: any): AxiosPromise<CustomRole>;
};
/**
 * CustomRolesApi - object-oriented interface
 * @export
 * @class CustomRolesApi
 * @extends {BaseAPI}
 */
export declare class CustomRolesApi extends BaseAPI {
    /**
     *
     * @summary Delete a custom role by key.
     * @param {string} customRoleKey The custom role key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomRolesApi
     */
    deleteCustomRole(customRoleKey: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Get one custom role by key.
     * @param {string} customRoleKey The custom role key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomRolesApi
     */
    getCustomRole(customRoleKey: string, options?: any): Promise<import("axios").AxiosResponse<CustomRole>>;
    /**
     *
     * @summary Return a complete list of custom roles.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomRolesApi
     */
    getCustomRoles(options?: any): Promise<import("axios").AxiosResponse<CustomRoles>>;
    /**
     *
     * @summary Modify a custom role by key.
     * @param {string} customRoleKey The custom role key.
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomRolesApi
     */
    patchCustomRole(customRoleKey: string, patchDelta: Array<PatchOperation>, options?: any): Promise<import("axios").AxiosResponse<CustomRole>>;
    /**
     *
     * @summary Create a new custom role.
     * @param {InlineObject8} customRoleBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomRolesApi
     */
    postCustomRole(customRoleBody: InlineObject8, options?: any): Promise<import("axios").AxiosResponse<CustomRole>>;
}
/**
 * CustomerMetricsApi - axios parameter creator
 * @export
 */
export declare const CustomerMetricsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get events usage by event id and the feature flag key.
     * @param {string} envId The environment id for the flag evaluations in question.
     * @param {string} flagKey The key of the flag we want metrics for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvaluations: (envId: string, flagKey: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get events usage by event type.
     * @param {string} type The type of event we would like to track.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvent: (type: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get events usage endpoints.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvents: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get monthly active user data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMAU: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get monthly active user data by category.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMAUByCategory: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a stream endpoint and return timeseries data.
     * @param {string} source The source of where the stream comes from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStream: (source: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a stream timeseries data by source show sdk version metadata.
     * @param {string} source The source of where the stream comes from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStreamBySDK: (source: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a stream timeseries data by source and show all sdk version associated.
     * @param {string} source The source of where the stream comes from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStreamSDKVersion: (source: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns a list of all streams.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStreams: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns of the usage endpoints available.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsage: (options?: any) => Promise<RequestArgs>;
};
/**
 * CustomerMetricsApi - functional programming interface
 * @export
 */
export declare const CustomerMetricsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get events usage by event id and the feature flag key.
     * @param {string} envId The environment id for the flag evaluations in question.
     * @param {string} flagKey The key of the flag we want metrics for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvaluations(envId: string, flagKey: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StreamSDKVersion>>;
    /**
     *
     * @summary Get events usage by event type.
     * @param {string} type The type of event we would like to track.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvent(type: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StreamSDKVersion>>;
    /**
     *
     * @summary Get events usage endpoints.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvents(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Events>>;
    /**
     *
     * @summary Get monthly active user data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMAU(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MAU>>;
    /**
     *
     * @summary Get monthly active user data by category.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMAUByCategory(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MAUbyCategory>>;
    /**
     *
     * @summary Get a stream endpoint and return timeseries data.
     * @param {string} source The source of where the stream comes from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStream(source: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Stream>>;
    /**
     *
     * @summary Get a stream timeseries data by source show sdk version metadata.
     * @param {string} source The source of where the stream comes from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStreamBySDK(source: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StreamBySDK>>;
    /**
     *
     * @summary Get a stream timeseries data by source and show all sdk version associated.
     * @param {string} source The source of where the stream comes from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStreamSDKVersion(source: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StreamSDKVersion>>;
    /**
     *
     * @summary Returns a list of all streams.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStreams(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Streams>>;
    /**
     *
     * @summary Returns of the usage endpoints available.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsage(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Usage>>;
};
/**
 * CustomerMetricsApi - factory interface
 * @export
 */
export declare const CustomerMetricsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get events usage by event id and the feature flag key.
     * @param {string} envId The environment id for the flag evaluations in question.
     * @param {string} flagKey The key of the flag we want metrics for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvaluations(envId: string, flagKey: string, options?: any): AxiosPromise<StreamSDKVersion>;
    /**
     *
     * @summary Get events usage by event type.
     * @param {string} type The type of event we would like to track.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvent(type: string, options?: any): AxiosPromise<StreamSDKVersion>;
    /**
     *
     * @summary Get events usage endpoints.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvents(options?: any): AxiosPromise<Events>;
    /**
     *
     * @summary Get monthly active user data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMAU(options?: any): AxiosPromise<MAU>;
    /**
     *
     * @summary Get monthly active user data by category.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMAUByCategory(options?: any): AxiosPromise<MAUbyCategory>;
    /**
     *
     * @summary Get a stream endpoint and return timeseries data.
     * @param {string} source The source of where the stream comes from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStream(source: string, options?: any): AxiosPromise<Stream>;
    /**
     *
     * @summary Get a stream timeseries data by source show sdk version metadata.
     * @param {string} source The source of where the stream comes from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStreamBySDK(source: string, options?: any): AxiosPromise<StreamBySDK>;
    /**
     *
     * @summary Get a stream timeseries data by source and show all sdk version associated.
     * @param {string} source The source of where the stream comes from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStreamSDKVersion(source: string, options?: any): AxiosPromise<StreamSDKVersion>;
    /**
     *
     * @summary Returns a list of all streams.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStreams(options?: any): AxiosPromise<Streams>;
    /**
     *
     * @summary Returns of the usage endpoints available.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsage(options?: any): AxiosPromise<Usage>;
};
/**
 * CustomerMetricsApi - object-oriented interface
 * @export
 * @class CustomerMetricsApi
 * @extends {BaseAPI}
 */
export declare class CustomerMetricsApi extends BaseAPI {
    /**
     *
     * @summary Get events usage by event id and the feature flag key.
     * @param {string} envId The environment id for the flag evaluations in question.
     * @param {string} flagKey The key of the flag we want metrics for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerMetricsApi
     */
    getEvaluations(envId: string, flagKey: string, options?: any): Promise<import("axios").AxiosResponse<StreamSDKVersion>>;
    /**
     *
     * @summary Get events usage by event type.
     * @param {string} type The type of event we would like to track.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerMetricsApi
     */
    getEvent(type: string, options?: any): Promise<import("axios").AxiosResponse<StreamSDKVersion>>;
    /**
     *
     * @summary Get events usage endpoints.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerMetricsApi
     */
    getEvents(options?: any): Promise<import("axios").AxiosResponse<Events>>;
    /**
     *
     * @summary Get monthly active user data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerMetricsApi
     */
    getMAU(options?: any): Promise<import("axios").AxiosResponse<MAU>>;
    /**
     *
     * @summary Get monthly active user data by category.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerMetricsApi
     */
    getMAUByCategory(options?: any): Promise<import("axios").AxiosResponse<MAUbyCategory>>;
    /**
     *
     * @summary Get a stream endpoint and return timeseries data.
     * @param {string} source The source of where the stream comes from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerMetricsApi
     */
    getStream(source: string, options?: any): Promise<import("axios").AxiosResponse<Stream>>;
    /**
     *
     * @summary Get a stream timeseries data by source show sdk version metadata.
     * @param {string} source The source of where the stream comes from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerMetricsApi
     */
    getStreamBySDK(source: string, options?: any): Promise<import("axios").AxiosResponse<StreamBySDK>>;
    /**
     *
     * @summary Get a stream timeseries data by source and show all sdk version associated.
     * @param {string} source The source of where the stream comes from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerMetricsApi
     */
    getStreamSDKVersion(source: string, options?: any): Promise<import("axios").AxiosResponse<StreamSDKVersion>>;
    /**
     *
     * @summary Returns a list of all streams.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerMetricsApi
     */
    getStreams(options?: any): Promise<import("axios").AxiosResponse<Streams>>;
    /**
     *
     * @summary Returns of the usage endpoints available.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerMetricsApi
     */
    getUsage(options?: any): Promise<import("axios").AxiosResponse<Usage>>;
}
/**
 * DataExportDestinationsApi - axios parameter creator
 * @export
 */
export declare const DataExportDestinationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get a single data export destination by ID
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} destinationId The data export destination ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDestination: (projectKey: string, environmentKey: string, destinationId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a single data export destination by ID
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} destinationId The data export destination ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDestination: (projectKey: string, environmentKey: string, destinationId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns a list of all data export destinations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDestinations: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Perform a partial update to a data export destination.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} destinationId The data export destination ID.
     * @param {Array<PatchOperation>} patchOnly Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39; Feature flag patches also support JSON Merge Patch format. \&#39;https://tools.ietf.org/html/rfc7386\&#39; The addition of comments is also supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchDestination: (projectKey: string, environmentKey: string, destinationId: string, patchOnly: Array<PatchOperation>, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a new data export destination
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {InlineObject9} destinationBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDestination: (projectKey: string, environmentKey: string, destinationBody: InlineObject9, options?: any) => Promise<RequestArgs>;
};
/**
 * DataExportDestinationsApi - functional programming interface
 * @export
 */
export declare const DataExportDestinationsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get a single data export destination by ID
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} destinationId The data export destination ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDestination(projectKey: string, environmentKey: string, destinationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get a single data export destination by ID
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} destinationId The data export destination ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDestination(projectKey: string, environmentKey: string, destinationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Destination>>;
    /**
     *
     * @summary Returns a list of all data export destinations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDestinations(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Destinations>>;
    /**
     *
     * @summary Perform a partial update to a data export destination.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} destinationId The data export destination ID.
     * @param {Array<PatchOperation>} patchOnly Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39; Feature flag patches also support JSON Merge Patch format. \&#39;https://tools.ietf.org/html/rfc7386\&#39; The addition of comments is also supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchDestination(projectKey: string, environmentKey: string, destinationId: string, patchOnly: Array<PatchOperation>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Destination>>;
    /**
     *
     * @summary Create a new data export destination
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {InlineObject9} destinationBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDestination(projectKey: string, environmentKey: string, destinationBody: InlineObject9, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Destination>>;
};
/**
 * DataExportDestinationsApi - factory interface
 * @export
 */
export declare const DataExportDestinationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get a single data export destination by ID
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} destinationId The data export destination ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDestination(projectKey: string, environmentKey: string, destinationId: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Get a single data export destination by ID
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} destinationId The data export destination ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDestination(projectKey: string, environmentKey: string, destinationId: string, options?: any): AxiosPromise<Destination>;
    /**
     *
     * @summary Returns a list of all data export destinations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDestinations(options?: any): AxiosPromise<Destinations>;
    /**
     *
     * @summary Perform a partial update to a data export destination.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} destinationId The data export destination ID.
     * @param {Array<PatchOperation>} patchOnly Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39; Feature flag patches also support JSON Merge Patch format. \&#39;https://tools.ietf.org/html/rfc7386\&#39; The addition of comments is also supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchDestination(projectKey: string, environmentKey: string, destinationId: string, patchOnly: Array<PatchOperation>, options?: any): AxiosPromise<Destination>;
    /**
     *
     * @summary Create a new data export destination
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {InlineObject9} destinationBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDestination(projectKey: string, environmentKey: string, destinationBody: InlineObject9, options?: any): AxiosPromise<Destination>;
};
/**
 * DataExportDestinationsApi - object-oriented interface
 * @export
 * @class DataExportDestinationsApi
 * @extends {BaseAPI}
 */
export declare class DataExportDestinationsApi extends BaseAPI {
    /**
     *
     * @summary Get a single data export destination by ID
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} destinationId The data export destination ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataExportDestinationsApi
     */
    deleteDestination(projectKey: string, environmentKey: string, destinationId: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Get a single data export destination by ID
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} destinationId The data export destination ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataExportDestinationsApi
     */
    getDestination(projectKey: string, environmentKey: string, destinationId: string, options?: any): Promise<import("axios").AxiosResponse<Destination>>;
    /**
     *
     * @summary Returns a list of all data export destinations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataExportDestinationsApi
     */
    getDestinations(options?: any): Promise<import("axios").AxiosResponse<Destinations>>;
    /**
     *
     * @summary Perform a partial update to a data export destination.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} destinationId The data export destination ID.
     * @param {Array<PatchOperation>} patchOnly Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39; Feature flag patches also support JSON Merge Patch format. \&#39;https://tools.ietf.org/html/rfc7386\&#39; The addition of comments is also supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataExportDestinationsApi
     */
    patchDestination(projectKey: string, environmentKey: string, destinationId: string, patchOnly: Array<PatchOperation>, options?: any): Promise<import("axios").AxiosResponse<Destination>>;
    /**
     *
     * @summary Create a new data export destination
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {InlineObject9} destinationBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataExportDestinationsApi
     */
    postDestination(projectKey: string, environmentKey: string, destinationBody: InlineObject9, options?: any): Promise<import("axios").AxiosResponse<Destination>>;
}
/**
 * EnvironmentsApi - axios parameter creator
 * @export
 */
export declare const EnvironmentsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete an environment in a specific project.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEnvironment: (projectKey: string, environmentKey: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get an environment given a project and key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvironment: (projectKey: string, environmentKey: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Modify an environment by ID.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEnvironment: (projectKey: string, environmentKey: string, patchDelta: Array<PatchOperation>, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a new environment in a specified project with a given name, key, and swatch color.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {EnvironmentPost} environmentBody New environment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postEnvironment: (projectKey: string, environmentBody: EnvironmentPost, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Reset an environment\'s mobile key. The optional expiry for the old key is deprecated for this endpoint, so the old key will always expire immediately.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {number} [expiry] The expiry parameter is deprecated for this endpoint, so the old mobile key will always expire immediately. This parameter will be removed in an upcoming major API client version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetEnvironmentMobileKey: (projectKey: string, environmentKey: string, expiry?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Reset an environment\'s SDK key with an optional expiry time for the old key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {number} [expiry] An expiration time for the old environment SDK key, expressed as a Unix epoch time in milliseconds. By default, the key will expire immediately.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetEnvironmentSDKKey: (projectKey: string, environmentKey: string, expiry?: number, options?: any) => Promise<RequestArgs>;
};
/**
 * EnvironmentsApi - functional programming interface
 * @export
 */
export declare const EnvironmentsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete an environment in a specific project.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEnvironment(projectKey: string, environmentKey: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get an environment given a project and key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvironment(projectKey: string, environmentKey: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Environment>>;
    /**
     *
     * @summary Modify an environment by ID.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEnvironment(projectKey: string, environmentKey: string, patchDelta: Array<PatchOperation>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Environment>>;
    /**
     *
     * @summary Create a new environment in a specified project with a given name, key, and swatch color.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {EnvironmentPost} environmentBody New environment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postEnvironment(projectKey: string, environmentBody: EnvironmentPost, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Environment>>;
    /**
     *
     * @summary Reset an environment\'s mobile key. The optional expiry for the old key is deprecated for this endpoint, so the old key will always expire immediately.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {number} [expiry] The expiry parameter is deprecated for this endpoint, so the old mobile key will always expire immediately. This parameter will be removed in an upcoming major API client version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetEnvironmentMobileKey(projectKey: string, environmentKey: string, expiry?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Environment>>;
    /**
     *
     * @summary Reset an environment\'s SDK key with an optional expiry time for the old key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {number} [expiry] An expiration time for the old environment SDK key, expressed as a Unix epoch time in milliseconds. By default, the key will expire immediately.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetEnvironmentSDKKey(projectKey: string, environmentKey: string, expiry?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Environment>>;
};
/**
 * EnvironmentsApi - factory interface
 * @export
 */
export declare const EnvironmentsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Delete an environment in a specific project.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEnvironment(projectKey: string, environmentKey: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Get an environment given a project and key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvironment(projectKey: string, environmentKey: string, options?: any): AxiosPromise<Environment>;
    /**
     *
     * @summary Modify an environment by ID.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEnvironment(projectKey: string, environmentKey: string, patchDelta: Array<PatchOperation>, options?: any): AxiosPromise<Environment>;
    /**
     *
     * @summary Create a new environment in a specified project with a given name, key, and swatch color.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {EnvironmentPost} environmentBody New environment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postEnvironment(projectKey: string, environmentBody: EnvironmentPost, options?: any): AxiosPromise<Environment>;
    /**
     *
     * @summary Reset an environment\'s mobile key. The optional expiry for the old key is deprecated for this endpoint, so the old key will always expire immediately.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {number} [expiry] The expiry parameter is deprecated for this endpoint, so the old mobile key will always expire immediately. This parameter will be removed in an upcoming major API client version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetEnvironmentMobileKey(projectKey: string, environmentKey: string, expiry?: number, options?: any): AxiosPromise<Environment>;
    /**
     *
     * @summary Reset an environment\'s SDK key with an optional expiry time for the old key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {number} [expiry] An expiration time for the old environment SDK key, expressed as a Unix epoch time in milliseconds. By default, the key will expire immediately.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetEnvironmentSDKKey(projectKey: string, environmentKey: string, expiry?: number, options?: any): AxiosPromise<Environment>;
};
/**
 * EnvironmentsApi - object-oriented interface
 * @export
 * @class EnvironmentsApi
 * @extends {BaseAPI}
 */
export declare class EnvironmentsApi extends BaseAPI {
    /**
     *
     * @summary Delete an environment in a specific project.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    deleteEnvironment(projectKey: string, environmentKey: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Get an environment given a project and key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    getEnvironment(projectKey: string, environmentKey: string, options?: any): Promise<import("axios").AxiosResponse<Environment>>;
    /**
     *
     * @summary Modify an environment by ID.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    patchEnvironment(projectKey: string, environmentKey: string, patchDelta: Array<PatchOperation>, options?: any): Promise<import("axios").AxiosResponse<Environment>>;
    /**
     *
     * @summary Create a new environment in a specified project with a given name, key, and swatch color.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {EnvironmentPost} environmentBody New environment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    postEnvironment(projectKey: string, environmentBody: EnvironmentPost, options?: any): Promise<import("axios").AxiosResponse<Environment>>;
    /**
     *
     * @summary Reset an environment\'s mobile key. The optional expiry for the old key is deprecated for this endpoint, so the old key will always expire immediately.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {number} [expiry] The expiry parameter is deprecated for this endpoint, so the old mobile key will always expire immediately. This parameter will be removed in an upcoming major API client version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    resetEnvironmentMobileKey(projectKey: string, environmentKey: string, expiry?: number, options?: any): Promise<import("axios").AxiosResponse<Environment>>;
    /**
     *
     * @summary Reset an environment\'s SDK key with an optional expiry time for the old key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {number} [expiry] An expiration time for the old environment SDK key, expressed as a Unix epoch time in milliseconds. By default, the key will expire immediately.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    resetEnvironmentSDKKey(projectKey: string, environmentKey: string, expiry?: number, options?: any): Promise<import("axios").AxiosResponse<Environment>>;
}
/**
 * FeatureFlagsApi - axios parameter creator
 * @export
 */
export declare const FeatureFlagsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Copies the feature flag configuration from one environment to the same feature flag in another environment.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {InlineObject3} featureFlagCopyBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    copyFeatureFlag: (projectKey: string, featureFlagKey: string, featureFlagCopyBody: InlineObject3, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a feature flag in all environments. Be careful-- only delete feature flags that are no longer being used by your application.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFeatureFlag: (projectKey: string, featureFlagKey: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get expiring user targets for feature flag
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExpiringUserTargets: (projectKey: string, environmentKey: string, featureFlagKey: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a single feature flag by key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {Array<string>} [env] By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env&#x3D;[\&quot;production\&quot;] will restrict the returned configurations to just your production environment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatureFlag: (projectKey: string, featureFlagKey: string, env?: Array<string>, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get the status for a particular feature flag.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatureFlagStatus: (projectKey: string, environmentKey: string, featureFlagKey: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get the status for a particular feature flag across environments
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatureFlagStatusAcrossEnvironments: (projectKey: string, featureFlagKey: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a list of statuses for all feature flags. The status includes the last time the feature flag was requested, as well as the state of the flag.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatureFlagStatuses: (projectKey: string, environmentKey: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a list of all features in the given project.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {Array<string>} [env] By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env&#x3D;[\&quot;production\&quot;] will restrict the returned configurations to just your production environment.
     * @param {boolean} [summary] By default in api version &gt;&#x3D; 1, flags will _not_ include their list of prerequisites, targets or rules.  Set summary&#x3D;0 to include these fields for each flag returned.
     * @param {boolean} [archived] When set to 1, only archived flags will be included in the list of flags returned.  By default, archived flags are not included in the list of flags.
     * @param {number} [limit] The number of objects to return. Defaults to -1, which returns everything.
     * @param {number} [offset] Where to start in the list. This is for use with pagination. For example, an offset of 10 would skip the first 10 items and then return the next limit items.
     * @param {string} [filter] A comma-separated list of filters. Each filter is of the form field:value.
     * @param {string} [sort] A comma-separated list of fields to sort by. A field prefixed by a - will be sorted in descending order.
     * @param {string} [tag] Filter by tag. A tag can be used to group flags across projects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatureFlags: (projectKey: string, env?: Array<string>, summary?: boolean, archived?: boolean, limit?: number, offset?: number, filter?: string, sort?: string, tag?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Update, add, or delete expiring user targets on feature flag
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {object} semanticPatchWithComment Requires a Semantic Patch representation of the desired changes to the resource. \&#39;https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches\&#39;. The addition of comments is also supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchExpiringUserTargets: (projectKey: string, environmentKey: string, featureFlagKey: string, semanticPatchWithComment: object, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Perform a partial update to a feature.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {InlineObject2} patchComment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchFeatureFlag: (projectKey: string, featureFlagKey: string, patchComment: InlineObject2, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a new feature flag.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {InlineObject1} featureFlagBody
     * @param {string} [clone] The key of the feature flag to be cloned. The key identifies the flag in your code.  For example, setting clone&#x3D;flagKey will copy the full targeting configuration for all environments (including on/off state) from the original flag to the new flag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postFeatureFlag: (projectKey: string, featureFlagBody: InlineObject1, clone?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * FeatureFlagsApi - functional programming interface
 * @export
 */
export declare const FeatureFlagsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Copies the feature flag configuration from one environment to the same feature flag in another environment.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {InlineObject3} featureFlagCopyBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    copyFeatureFlag(projectKey: string, featureFlagKey: string, featureFlagCopyBody: InlineObject3, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureFlag>>;
    /**
     *
     * @summary Delete a feature flag in all environments. Be careful-- only delete feature flags that are no longer being used by your application.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFeatureFlag(projectKey: string, featureFlagKey: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get expiring user targets for feature flag
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExpiringUserTargets(projectKey: string, environmentKey: string, featureFlagKey: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTargetingExpirationForFlags>>;
    /**
     *
     * @summary Get a single feature flag by key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {Array<string>} [env] By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env&#x3D;[\&quot;production\&quot;] will restrict the returned configurations to just your production environment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatureFlag(projectKey: string, featureFlagKey: string, env?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureFlag>>;
    /**
     *
     * @summary Get the status for a particular feature flag.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatureFlagStatus(projectKey: string, environmentKey: string, featureFlagKey: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureFlagStatus>>;
    /**
     *
     * @summary Get the status for a particular feature flag across environments
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatureFlagStatusAcrossEnvironments(projectKey: string, featureFlagKey: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureFlagStatusAcrossEnvironments>>;
    /**
     *
     * @summary Get a list of statuses for all feature flags. The status includes the last time the feature flag was requested, as well as the state of the flag.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatureFlagStatuses(projectKey: string, environmentKey: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureFlagStatuses>>;
    /**
     *
     * @summary Get a list of all features in the given project.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {Array<string>} [env] By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env&#x3D;[\&quot;production\&quot;] will restrict the returned configurations to just your production environment.
     * @param {boolean} [summary] By default in api version &gt;&#x3D; 1, flags will _not_ include their list of prerequisites, targets or rules.  Set summary&#x3D;0 to include these fields for each flag returned.
     * @param {boolean} [archived] When set to 1, only archived flags will be included in the list of flags returned.  By default, archived flags are not included in the list of flags.
     * @param {number} [limit] The number of objects to return. Defaults to -1, which returns everything.
     * @param {number} [offset] Where to start in the list. This is for use with pagination. For example, an offset of 10 would skip the first 10 items and then return the next limit items.
     * @param {string} [filter] A comma-separated list of filters. Each filter is of the form field:value.
     * @param {string} [sort] A comma-separated list of fields to sort by. A field prefixed by a - will be sorted in descending order.
     * @param {string} [tag] Filter by tag. A tag can be used to group flags across projects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatureFlags(projectKey: string, env?: Array<string>, summary?: boolean, archived?: boolean, limit?: number, offset?: number, filter?: string, sort?: string, tag?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureFlags>>;
    /**
     *
     * @summary Update, add, or delete expiring user targets on feature flag
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {object} semanticPatchWithComment Requires a Semantic Patch representation of the desired changes to the resource. \&#39;https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches\&#39;. The addition of comments is also supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchExpiringUserTargets(projectKey: string, environmentKey: string, featureFlagKey: string, semanticPatchWithComment: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTargetingExpirationForFlags>>;
    /**
     *
     * @summary Perform a partial update to a feature.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {InlineObject2} patchComment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchFeatureFlag(projectKey: string, featureFlagKey: string, patchComment: InlineObject2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureFlag>>;
    /**
     *
     * @summary Creates a new feature flag.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {InlineObject1} featureFlagBody
     * @param {string} [clone] The key of the feature flag to be cloned. The key identifies the flag in your code.  For example, setting clone&#x3D;flagKey will copy the full targeting configuration for all environments (including on/off state) from the original flag to the new flag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postFeatureFlag(projectKey: string, featureFlagBody: InlineObject1, clone?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureFlag>>;
};
/**
 * FeatureFlagsApi - factory interface
 * @export
 */
export declare const FeatureFlagsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Copies the feature flag configuration from one environment to the same feature flag in another environment.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {InlineObject3} featureFlagCopyBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    copyFeatureFlag(projectKey: string, featureFlagKey: string, featureFlagCopyBody: InlineObject3, options?: any): AxiosPromise<FeatureFlag>;
    /**
     *
     * @summary Delete a feature flag in all environments. Be careful-- only delete feature flags that are no longer being used by your application.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFeatureFlag(projectKey: string, featureFlagKey: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Get expiring user targets for feature flag
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExpiringUserTargets(projectKey: string, environmentKey: string, featureFlagKey: string, options?: any): AxiosPromise<UserTargetingExpirationForFlags>;
    /**
     *
     * @summary Get a single feature flag by key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {Array<string>} [env] By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env&#x3D;[\&quot;production\&quot;] will restrict the returned configurations to just your production environment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatureFlag(projectKey: string, featureFlagKey: string, env?: Array<string>, options?: any): AxiosPromise<FeatureFlag>;
    /**
     *
     * @summary Get the status for a particular feature flag.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatureFlagStatus(projectKey: string, environmentKey: string, featureFlagKey: string, options?: any): AxiosPromise<FeatureFlagStatus>;
    /**
     *
     * @summary Get the status for a particular feature flag across environments
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatureFlagStatusAcrossEnvironments(projectKey: string, featureFlagKey: string, options?: any): AxiosPromise<FeatureFlagStatusAcrossEnvironments>;
    /**
     *
     * @summary Get a list of statuses for all feature flags. The status includes the last time the feature flag was requested, as well as the state of the flag.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatureFlagStatuses(projectKey: string, environmentKey: string, options?: any): AxiosPromise<FeatureFlagStatuses>;
    /**
     *
     * @summary Get a list of all features in the given project.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {Array<string>} [env] By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env&#x3D;[\&quot;production\&quot;] will restrict the returned configurations to just your production environment.
     * @param {boolean} [summary] By default in api version &gt;&#x3D; 1, flags will _not_ include their list of prerequisites, targets or rules.  Set summary&#x3D;0 to include these fields for each flag returned.
     * @param {boolean} [archived] When set to 1, only archived flags will be included in the list of flags returned.  By default, archived flags are not included in the list of flags.
     * @param {number} [limit] The number of objects to return. Defaults to -1, which returns everything.
     * @param {number} [offset] Where to start in the list. This is for use with pagination. For example, an offset of 10 would skip the first 10 items and then return the next limit items.
     * @param {string} [filter] A comma-separated list of filters. Each filter is of the form field:value.
     * @param {string} [sort] A comma-separated list of fields to sort by. A field prefixed by a - will be sorted in descending order.
     * @param {string} [tag] Filter by tag. A tag can be used to group flags across projects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatureFlags(projectKey: string, env?: Array<string>, summary?: boolean, archived?: boolean, limit?: number, offset?: number, filter?: string, sort?: string, tag?: string, options?: any): AxiosPromise<FeatureFlags>;
    /**
     *
     * @summary Update, add, or delete expiring user targets on feature flag
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {object} semanticPatchWithComment Requires a Semantic Patch representation of the desired changes to the resource. \&#39;https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches\&#39;. The addition of comments is also supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchExpiringUserTargets(projectKey: string, environmentKey: string, featureFlagKey: string, semanticPatchWithComment: object, options?: any): AxiosPromise<UserTargetingExpirationForFlags>;
    /**
     *
     * @summary Perform a partial update to a feature.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {InlineObject2} patchComment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchFeatureFlag(projectKey: string, featureFlagKey: string, patchComment: InlineObject2, options?: any): AxiosPromise<FeatureFlag>;
    /**
     *
     * @summary Creates a new feature flag.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {InlineObject1} featureFlagBody
     * @param {string} [clone] The key of the feature flag to be cloned. The key identifies the flag in your code.  For example, setting clone&#x3D;flagKey will copy the full targeting configuration for all environments (including on/off state) from the original flag to the new flag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postFeatureFlag(projectKey: string, featureFlagBody: InlineObject1, clone?: string, options?: any): AxiosPromise<FeatureFlag>;
};
/**
 * FeatureFlagsApi - object-oriented interface
 * @export
 * @class FeatureFlagsApi
 * @extends {BaseAPI}
 */
export declare class FeatureFlagsApi extends BaseAPI {
    /**
     *
     * @summary Copies the feature flag configuration from one environment to the same feature flag in another environment.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {InlineObject3} featureFlagCopyBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagsApi
     */
    copyFeatureFlag(projectKey: string, featureFlagKey: string, featureFlagCopyBody: InlineObject3, options?: any): Promise<import("axios").AxiosResponse<FeatureFlag>>;
    /**
     *
     * @summary Delete a feature flag in all environments. Be careful-- only delete feature flags that are no longer being used by your application.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagsApi
     */
    deleteFeatureFlag(projectKey: string, featureFlagKey: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Get expiring user targets for feature flag
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagsApi
     */
    getExpiringUserTargets(projectKey: string, environmentKey: string, featureFlagKey: string, options?: any): Promise<import("axios").AxiosResponse<UserTargetingExpirationForFlags>>;
    /**
     *
     * @summary Get a single feature flag by key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {Array<string>} [env] By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env&#x3D;[\&quot;production\&quot;] will restrict the returned configurations to just your production environment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagsApi
     */
    getFeatureFlag(projectKey: string, featureFlagKey: string, env?: Array<string>, options?: any): Promise<import("axios").AxiosResponse<FeatureFlag>>;
    /**
     *
     * @summary Get the status for a particular feature flag.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagsApi
     */
    getFeatureFlagStatus(projectKey: string, environmentKey: string, featureFlagKey: string, options?: any): Promise<import("axios").AxiosResponse<FeatureFlagStatus>>;
    /**
     *
     * @summary Get the status for a particular feature flag across environments
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagsApi
     */
    getFeatureFlagStatusAcrossEnvironments(projectKey: string, featureFlagKey: string, options?: any): Promise<import("axios").AxiosResponse<FeatureFlagStatusAcrossEnvironments>>;
    /**
     *
     * @summary Get a list of statuses for all feature flags. The status includes the last time the feature flag was requested, as well as the state of the flag.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagsApi
     */
    getFeatureFlagStatuses(projectKey: string, environmentKey: string, options?: any): Promise<import("axios").AxiosResponse<FeatureFlagStatuses>>;
    /**
     *
     * @summary Get a list of all features in the given project.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {Array<string>} [env] By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env&#x3D;[\&quot;production\&quot;] will restrict the returned configurations to just your production environment.
     * @param {boolean} [summary] By default in api version &gt;&#x3D; 1, flags will _not_ include their list of prerequisites, targets or rules.  Set summary&#x3D;0 to include these fields for each flag returned.
     * @param {boolean} [archived] When set to 1, only archived flags will be included in the list of flags returned.  By default, archived flags are not included in the list of flags.
     * @param {number} [limit] The number of objects to return. Defaults to -1, which returns everything.
     * @param {number} [offset] Where to start in the list. This is for use with pagination. For example, an offset of 10 would skip the first 10 items and then return the next limit items.
     * @param {string} [filter] A comma-separated list of filters. Each filter is of the form field:value.
     * @param {string} [sort] A comma-separated list of fields to sort by. A field prefixed by a - will be sorted in descending order.
     * @param {string} [tag] Filter by tag. A tag can be used to group flags across projects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagsApi
     */
    getFeatureFlags(projectKey: string, env?: Array<string>, summary?: boolean, archived?: boolean, limit?: number, offset?: number, filter?: string, sort?: string, tag?: string, options?: any): Promise<import("axios").AxiosResponse<FeatureFlags>>;
    /**
     *
     * @summary Update, add, or delete expiring user targets on feature flag
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {object} semanticPatchWithComment Requires a Semantic Patch representation of the desired changes to the resource. \&#39;https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches\&#39;. The addition of comments is also supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagsApi
     */
    patchExpiringUserTargets(projectKey: string, environmentKey: string, featureFlagKey: string, semanticPatchWithComment: object, options?: any): Promise<import("axios").AxiosResponse<UserTargetingExpirationForFlags>>;
    /**
     *
     * @summary Perform a partial update to a feature.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {InlineObject2} patchComment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagsApi
     */
    patchFeatureFlag(projectKey: string, featureFlagKey: string, patchComment: InlineObject2, options?: any): Promise<import("axios").AxiosResponse<FeatureFlag>>;
    /**
     *
     * @summary Creates a new feature flag.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {InlineObject1} featureFlagBody
     * @param {string} [clone] The key of the feature flag to be cloned. The key identifies the flag in your code.  For example, setting clone&#x3D;flagKey will copy the full targeting configuration for all environments (including on/off state) from the original flag to the new flag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagsApi
     */
    postFeatureFlag(projectKey: string, featureFlagBody: InlineObject1, clone?: string, options?: any): Promise<import("axios").AxiosResponse<FeatureFlag>>;
}
/**
 * IntegrationsApi - axios parameter creator
 * @export
 */
export declare const IntegrationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete an integration subscription by ID.
     * @param {string} integrationKey The key used to specify the integration kind.
     * @param {string} integrationId The integration ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteIntegrationSubscription: (integrationKey: string, integrationId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a single integration subscription by ID.
     * @param {string} integrationKey The key used to specify the integration kind.
     * @param {string} integrationId The integration ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegrationSubscription: (integrationKey: string, integrationId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a list of all configured integrations of a given kind.
     * @param {string} integrationKey The key used to specify the integration kind.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegrationSubscriptions: (integrationKey: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a list of all configured audit log event integrations associated with this account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegrations: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Modify an integration subscription by ID.
     * @param {string} integrationKey The key used to specify the integration kind.
     * @param {string} integrationId The integration ID.
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchIntegrationSubscription: (integrationKey: string, integrationId: string, patchDelta: Array<PatchOperation>, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a new integration subscription of a given kind.
     * @param {string} integrationKey The key used to specify the integration kind.
     * @param {InlineObject12} subscriptionBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postIntegrationSubscription: (integrationKey: string, subscriptionBody: InlineObject12, options?: any) => Promise<RequestArgs>;
};
/**
 * IntegrationsApi - functional programming interface
 * @export
 */
export declare const IntegrationsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete an integration subscription by ID.
     * @param {string} integrationKey The key used to specify the integration kind.
     * @param {string} integrationId The integration ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteIntegrationSubscription(integrationKey: string, integrationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get a single integration subscription by ID.
     * @param {string} integrationKey The key used to specify the integration kind.
     * @param {string} integrationId The integration ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegrationSubscription(integrationKey: string, integrationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationSubscription>>;
    /**
     *
     * @summary Get a list of all configured integrations of a given kind.
     * @param {string} integrationKey The key used to specify the integration kind.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegrationSubscriptions(integrationKey: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Integration>>;
    /**
     *
     * @summary Get a list of all configured audit log event integrations associated with this account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegrations(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Integrations>>;
    /**
     *
     * @summary Modify an integration subscription by ID.
     * @param {string} integrationKey The key used to specify the integration kind.
     * @param {string} integrationId The integration ID.
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchIntegrationSubscription(integrationKey: string, integrationId: string, patchDelta: Array<PatchOperation>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationSubscription>>;
    /**
     *
     * @summary Create a new integration subscription of a given kind.
     * @param {string} integrationKey The key used to specify the integration kind.
     * @param {InlineObject12} subscriptionBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postIntegrationSubscription(integrationKey: string, subscriptionBody: InlineObject12, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationSubscription>>;
};
/**
 * IntegrationsApi - factory interface
 * @export
 */
export declare const IntegrationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Delete an integration subscription by ID.
     * @param {string} integrationKey The key used to specify the integration kind.
     * @param {string} integrationId The integration ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteIntegrationSubscription(integrationKey: string, integrationId: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Get a single integration subscription by ID.
     * @param {string} integrationKey The key used to specify the integration kind.
     * @param {string} integrationId The integration ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegrationSubscription(integrationKey: string, integrationId: string, options?: any): AxiosPromise<IntegrationSubscription>;
    /**
     *
     * @summary Get a list of all configured integrations of a given kind.
     * @param {string} integrationKey The key used to specify the integration kind.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegrationSubscriptions(integrationKey: string, options?: any): AxiosPromise<Integration>;
    /**
     *
     * @summary Get a list of all configured audit log event integrations associated with this account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegrations(options?: any): AxiosPromise<Integrations>;
    /**
     *
     * @summary Modify an integration subscription by ID.
     * @param {string} integrationKey The key used to specify the integration kind.
     * @param {string} integrationId The integration ID.
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchIntegrationSubscription(integrationKey: string, integrationId: string, patchDelta: Array<PatchOperation>, options?: any): AxiosPromise<IntegrationSubscription>;
    /**
     *
     * @summary Create a new integration subscription of a given kind.
     * @param {string} integrationKey The key used to specify the integration kind.
     * @param {InlineObject12} subscriptionBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postIntegrationSubscription(integrationKey: string, subscriptionBody: InlineObject12, options?: any): AxiosPromise<IntegrationSubscription>;
};
/**
 * IntegrationsApi - object-oriented interface
 * @export
 * @class IntegrationsApi
 * @extends {BaseAPI}
 */
export declare class IntegrationsApi extends BaseAPI {
    /**
     *
     * @summary Delete an integration subscription by ID.
     * @param {string} integrationKey The key used to specify the integration kind.
     * @param {string} integrationId The integration ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    deleteIntegrationSubscription(integrationKey: string, integrationId: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Get a single integration subscription by ID.
     * @param {string} integrationKey The key used to specify the integration kind.
     * @param {string} integrationId The integration ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    getIntegrationSubscription(integrationKey: string, integrationId: string, options?: any): Promise<import("axios").AxiosResponse<IntegrationSubscription>>;
    /**
     *
     * @summary Get a list of all configured integrations of a given kind.
     * @param {string} integrationKey The key used to specify the integration kind.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    getIntegrationSubscriptions(integrationKey: string, options?: any): Promise<import("axios").AxiosResponse<Integration>>;
    /**
     *
     * @summary Get a list of all configured audit log event integrations associated with this account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    getIntegrations(options?: any): Promise<import("axios").AxiosResponse<Integrations>>;
    /**
     *
     * @summary Modify an integration subscription by ID.
     * @param {string} integrationKey The key used to specify the integration kind.
     * @param {string} integrationId The integration ID.
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    patchIntegrationSubscription(integrationKey: string, integrationId: string, patchDelta: Array<PatchOperation>, options?: any): Promise<import("axios").AxiosResponse<IntegrationSubscription>>;
    /**
     *
     * @summary Create a new integration subscription of a given kind.
     * @param {string} integrationKey The key used to specify the integration kind.
     * @param {InlineObject12} subscriptionBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    postIntegrationSubscription(integrationKey: string, subscriptionBody: InlineObject12, options?: any): Promise<import("axios").AxiosResponse<IntegrationSubscription>>;
}
/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export declare const ProjectsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete a project by key. Caution-- deleting a project will delete all associated environments and feature flags. You cannot delete the last project in an account.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProject: (projectKey: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Fetch a single project by key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProject: (projectKey: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns a list of all projects in the account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjects: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Modify a project by ID.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchProject: (projectKey: string, patchDelta: Array<PatchOperation>, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a new project with the given key and name.
     * @param {InlineObject} projectBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProject: (projectBody: InlineObject, options?: any) => Promise<RequestArgs>;
};
/**
 * ProjectsApi - functional programming interface
 * @export
 */
export declare const ProjectsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete a project by key. Caution-- deleting a project will delete all associated environments and feature flags. You cannot delete the last project in an account.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProject(projectKey: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Fetch a single project by key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProject(projectKey: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>>;
    /**
     *
     * @summary Returns a list of all projects in the account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjects(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Projects>>;
    /**
     *
     * @summary Modify a project by ID.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchProject(projectKey: string, patchDelta: Array<PatchOperation>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>>;
    /**
     *
     * @summary Create a new project with the given key and name.
     * @param {InlineObject} projectBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProject(projectBody: InlineObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>>;
};
/**
 * ProjectsApi - factory interface
 * @export
 */
export declare const ProjectsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Delete a project by key. Caution-- deleting a project will delete all associated environments and feature flags. You cannot delete the last project in an account.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProject(projectKey: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Fetch a single project by key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProject(projectKey: string, options?: any): AxiosPromise<Project>;
    /**
     *
     * @summary Returns a list of all projects in the account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjects(options?: any): AxiosPromise<Projects>;
    /**
     *
     * @summary Modify a project by ID.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchProject(projectKey: string, patchDelta: Array<PatchOperation>, options?: any): AxiosPromise<Project>;
    /**
     *
     * @summary Create a new project with the given key and name.
     * @param {InlineObject} projectBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProject(projectBody: InlineObject, options?: any): AxiosPromise<Project>;
};
/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export declare class ProjectsApi extends BaseAPI {
    /**
     *
     * @summary Delete a project by key. Caution-- deleting a project will delete all associated environments and feature flags. You cannot delete the last project in an account.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    deleteProject(projectKey: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Fetch a single project by key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    getProject(projectKey: string, options?: any): Promise<import("axios").AxiosResponse<Project>>;
    /**
     *
     * @summary Returns a list of all projects in the account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    getProjects(options?: any): Promise<import("axios").AxiosResponse<Projects>>;
    /**
     *
     * @summary Modify a project by ID.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    patchProject(projectKey: string, patchDelta: Array<PatchOperation>, options?: any): Promise<import("axios").AxiosResponse<Project>>;
    /**
     *
     * @summary Create a new project with the given key and name.
     * @param {InlineObject} projectBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    postProject(projectBody: InlineObject, options?: any): Promise<import("axios").AxiosResponse<Project>>;
}
/**
 * RelayProxyConfigurationsApi - axios parameter creator
 * @export
 */
export declare const RelayProxyConfigurationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete a relay proxy configuration by ID.
     * @param {string} id The relay proxy configuration ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRelayProxyConfig: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a single relay proxy configuration by ID.
     * @param {string} id The relay proxy configuration ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRelayProxyConfig: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns a list of relay proxy configurations in the account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRelayProxyConfigs: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Modify a relay proxy configuration by ID.
     * @param {string} id The relay proxy configuration ID
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchRelayProxyConfig: (id: string, patchDelta: Array<PatchOperation>, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a new relay proxy config.
     * @param {InlineObject11} relayProxyConfigBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postRelayAutoConfig: (relayProxyConfigBody: InlineObject11, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Reset a relay proxy configuration\'s secret key with an optional expiry time for the old key.
     * @param {string} id The relay proxy configuration ID
     * @param {number} [expiry] An expiration time for the old relay proxy configuration key, expressed as a Unix epoch time in milliseconds. By default, the relay proxy configuration will expire immediately
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetRelayProxyConfig: (id: string, expiry?: number, options?: any) => Promise<RequestArgs>;
};
/**
 * RelayProxyConfigurationsApi - functional programming interface
 * @export
 */
export declare const RelayProxyConfigurationsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete a relay proxy configuration by ID.
     * @param {string} id The relay proxy configuration ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRelayProxyConfig(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get a single relay proxy configuration by ID.
     * @param {string} id The relay proxy configuration ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRelayProxyConfig(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelayProxyConfig>>;
    /**
     *
     * @summary Returns a list of relay proxy configurations in the account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRelayProxyConfigs(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelayProxyConfigs>>;
    /**
     *
     * @summary Modify a relay proxy configuration by ID.
     * @param {string} id The relay proxy configuration ID
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchRelayProxyConfig(id: string, patchDelta: Array<PatchOperation>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelayProxyConfig>>;
    /**
     *
     * @summary Create a new relay proxy config.
     * @param {InlineObject11} relayProxyConfigBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postRelayAutoConfig(relayProxyConfigBody: InlineObject11, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelayProxyConfig>>;
    /**
     *
     * @summary Reset a relay proxy configuration\'s secret key with an optional expiry time for the old key.
     * @param {string} id The relay proxy configuration ID
     * @param {number} [expiry] An expiration time for the old relay proxy configuration key, expressed as a Unix epoch time in milliseconds. By default, the relay proxy configuration will expire immediately
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetRelayProxyConfig(id: string, expiry?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelayProxyConfig>>;
};
/**
 * RelayProxyConfigurationsApi - factory interface
 * @export
 */
export declare const RelayProxyConfigurationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Delete a relay proxy configuration by ID.
     * @param {string} id The relay proxy configuration ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRelayProxyConfig(id: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Get a single relay proxy configuration by ID.
     * @param {string} id The relay proxy configuration ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRelayProxyConfig(id: string, options?: any): AxiosPromise<RelayProxyConfig>;
    /**
     *
     * @summary Returns a list of relay proxy configurations in the account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRelayProxyConfigs(options?: any): AxiosPromise<RelayProxyConfigs>;
    /**
     *
     * @summary Modify a relay proxy configuration by ID.
     * @param {string} id The relay proxy configuration ID
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchRelayProxyConfig(id: string, patchDelta: Array<PatchOperation>, options?: any): AxiosPromise<RelayProxyConfig>;
    /**
     *
     * @summary Create a new relay proxy config.
     * @param {InlineObject11} relayProxyConfigBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postRelayAutoConfig(relayProxyConfigBody: InlineObject11, options?: any): AxiosPromise<RelayProxyConfig>;
    /**
     *
     * @summary Reset a relay proxy configuration\'s secret key with an optional expiry time for the old key.
     * @param {string} id The relay proxy configuration ID
     * @param {number} [expiry] An expiration time for the old relay proxy configuration key, expressed as a Unix epoch time in milliseconds. By default, the relay proxy configuration will expire immediately
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetRelayProxyConfig(id: string, expiry?: number, options?: any): AxiosPromise<RelayProxyConfig>;
};
/**
 * RelayProxyConfigurationsApi - object-oriented interface
 * @export
 * @class RelayProxyConfigurationsApi
 * @extends {BaseAPI}
 */
export declare class RelayProxyConfigurationsApi extends BaseAPI {
    /**
     *
     * @summary Delete a relay proxy configuration by ID.
     * @param {string} id The relay proxy configuration ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelayProxyConfigurationsApi
     */
    deleteRelayProxyConfig(id: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Get a single relay proxy configuration by ID.
     * @param {string} id The relay proxy configuration ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelayProxyConfigurationsApi
     */
    getRelayProxyConfig(id: string, options?: any): Promise<import("axios").AxiosResponse<RelayProxyConfig>>;
    /**
     *
     * @summary Returns a list of relay proxy configurations in the account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelayProxyConfigurationsApi
     */
    getRelayProxyConfigs(options?: any): Promise<import("axios").AxiosResponse<RelayProxyConfigs>>;
    /**
     *
     * @summary Modify a relay proxy configuration by ID.
     * @param {string} id The relay proxy configuration ID
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelayProxyConfigurationsApi
     */
    patchRelayProxyConfig(id: string, patchDelta: Array<PatchOperation>, options?: any): Promise<import("axios").AxiosResponse<RelayProxyConfig>>;
    /**
     *
     * @summary Create a new relay proxy config.
     * @param {InlineObject11} relayProxyConfigBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelayProxyConfigurationsApi
     */
    postRelayAutoConfig(relayProxyConfigBody: InlineObject11, options?: any): Promise<import("axios").AxiosResponse<RelayProxyConfig>>;
    /**
     *
     * @summary Reset a relay proxy configuration\'s secret key with an optional expiry time for the old key.
     * @param {string} id The relay proxy configuration ID
     * @param {number} [expiry] An expiration time for the old relay proxy configuration key, expressed as a Unix epoch time in milliseconds. By default, the relay proxy configuration will expire immediately
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelayProxyConfigurationsApi
     */
    resetRelayProxyConfig(id: string, expiry?: number, options?: any): Promise<import("axios").AxiosResponse<RelayProxyConfig>>;
}
/**
 * RootApi - axios parameter creator
 * @export
 */
export declare const RootApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * You can issue a GET request to the root resource to find all of the resource categories supported by the API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoot: (options?: any) => Promise<RequestArgs>;
};
/**
 * RootApi - functional programming interface
 * @export
 */
export declare const RootApiFp: (configuration?: Configuration) => {
    /**
     * You can issue a GET request to the root resource to find all of the resource categories supported by the API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoot(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Links>>;
};
/**
 * RootApi - factory interface
 * @export
 */
export declare const RootApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * You can issue a GET request to the root resource to find all of the resource categories supported by the API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoot(options?: any): AxiosPromise<Links>;
};
/**
 * RootApi - object-oriented interface
 * @export
 * @class RootApi
 * @extends {BaseAPI}
 */
export declare class RootApi extends BaseAPI {
    /**
     * You can issue a GET request to the root resource to find all of the resource categories supported by the API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootApi
     */
    getRoot(options?: any): Promise<import("axios").AxiosResponse<Links>>;
}
/**
 * TeamMembersApi - axios parameter creator
 * @export
 */
export declare const TeamMembersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete a team member by ID.
     * @param {string} memberId The member ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMember: (memberId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get the current team member associated with the token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMe: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a single team member by ID.
     * @param {string} memberId The member ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMember: (memberId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns a list of all members in the account.
     * @param {number} [limit] The number of objects to return. Defaults to -1, which returns everything.
     * @param {number} [offset] Where to start in the list. This is for use with pagination. For example, an offset of 10 would skip the first 10 items and then return the next limit items.
     * @param {string} [filter] A comma-separated list of filters. Each filter is of the form field:value.
     * @param {string} [sort] A comma-separated list of fields to sort by. A field prefixed by a - will be sorted in descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMembers: (limit?: number, offset?: number, filter?: string, sort?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Modify a team member by ID.
     * @param {string} memberId The member ID.
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchMember: (memberId: string, patchDelta: Array<PatchOperation>, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Invite new members.
     * @param {Array<InlineObject>} membersBody New members to invite.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postMembers: (membersBody: Array<InlineObject>, options?: any) => Promise<RequestArgs>;
};
/**
 * TeamMembersApi - functional programming interface
 * @export
 */
export declare const TeamMembersApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete a team member by ID.
     * @param {string} memberId The member ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMember(memberId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get the current team member associated with the token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMe(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Member>>;
    /**
     *
     * @summary Get a single team member by ID.
     * @param {string} memberId The member ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMember(memberId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Member>>;
    /**
     *
     * @summary Returns a list of all members in the account.
     * @param {number} [limit] The number of objects to return. Defaults to -1, which returns everything.
     * @param {number} [offset] Where to start in the list. This is for use with pagination. For example, an offset of 10 would skip the first 10 items and then return the next limit items.
     * @param {string} [filter] A comma-separated list of filters. Each filter is of the form field:value.
     * @param {string} [sort] A comma-separated list of fields to sort by. A field prefixed by a - will be sorted in descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMembers(limit?: number, offset?: number, filter?: string, sort?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Members>>;
    /**
     *
     * @summary Modify a team member by ID.
     * @param {string} memberId The member ID.
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchMember(memberId: string, patchDelta: Array<PatchOperation>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Member>>;
    /**
     *
     * @summary Invite new members.
     * @param {Array<InlineObject>} membersBody New members to invite.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postMembers(membersBody: Array<InlineObject>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Members>>;
};
/**
 * TeamMembersApi - factory interface
 * @export
 */
export declare const TeamMembersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Delete a team member by ID.
     * @param {string} memberId The member ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMember(memberId: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Get the current team member associated with the token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMe(options?: any): AxiosPromise<Member>;
    /**
     *
     * @summary Get a single team member by ID.
     * @param {string} memberId The member ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMember(memberId: string, options?: any): AxiosPromise<Member>;
    /**
     *
     * @summary Returns a list of all members in the account.
     * @param {number} [limit] The number of objects to return. Defaults to -1, which returns everything.
     * @param {number} [offset] Where to start in the list. This is for use with pagination. For example, an offset of 10 would skip the first 10 items and then return the next limit items.
     * @param {string} [filter] A comma-separated list of filters. Each filter is of the form field:value.
     * @param {string} [sort] A comma-separated list of fields to sort by. A field prefixed by a - will be sorted in descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMembers(limit?: number, offset?: number, filter?: string, sort?: string, options?: any): AxiosPromise<Members>;
    /**
     *
     * @summary Modify a team member by ID.
     * @param {string} memberId The member ID.
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchMember(memberId: string, patchDelta: Array<PatchOperation>, options?: any): AxiosPromise<Member>;
    /**
     *
     * @summary Invite new members.
     * @param {Array<InlineObject>} membersBody New members to invite.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postMembers(membersBody: Array<InlineObject>, options?: any): AxiosPromise<Members>;
};
/**
 * TeamMembersApi - object-oriented interface
 * @export
 * @class TeamMembersApi
 * @extends {BaseAPI}
 */
export declare class TeamMembersApi extends BaseAPI {
    /**
     *
     * @summary Delete a team member by ID.
     * @param {string} memberId The member ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamMembersApi
     */
    deleteMember(memberId: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Get the current team member associated with the token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamMembersApi
     */
    getMe(options?: any): Promise<import("axios").AxiosResponse<Member>>;
    /**
     *
     * @summary Get a single team member by ID.
     * @param {string} memberId The member ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamMembersApi
     */
    getMember(memberId: string, options?: any): Promise<import("axios").AxiosResponse<Member>>;
    /**
     *
     * @summary Returns a list of all members in the account.
     * @param {number} [limit] The number of objects to return. Defaults to -1, which returns everything.
     * @param {number} [offset] Where to start in the list. This is for use with pagination. For example, an offset of 10 would skip the first 10 items and then return the next limit items.
     * @param {string} [filter] A comma-separated list of filters. Each filter is of the form field:value.
     * @param {string} [sort] A comma-separated list of fields to sort by. A field prefixed by a - will be sorted in descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamMembersApi
     */
    getMembers(limit?: number, offset?: number, filter?: string, sort?: string, options?: any): Promise<import("axios").AxiosResponse<Members>>;
    /**
     *
     * @summary Modify a team member by ID.
     * @param {string} memberId The member ID.
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamMembersApi
     */
    patchMember(memberId: string, patchDelta: Array<PatchOperation>, options?: any): Promise<import("axios").AxiosResponse<Member>>;
    /**
     *
     * @summary Invite new members.
     * @param {Array<InlineObject>} membersBody New members to invite.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamMembersApi
     */
    postMembers(membersBody: Array<InlineObject>, options?: any): Promise<import("axios").AxiosResponse<Members>>;
}
/**
 * UserSegmentsApi - axios parameter creator
 * @export
 */
export declare const UserSegmentsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete a user segment.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userSegmentKey The user segment\&#39;s key. The key identifies the user segment in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserSegment: (projectKey: string, environmentKey: string, userSegmentKey: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get expiring user targets for user segment
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userSegmentKey The user segment\&#39;s key. The key identifies the user segment in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExpiringUserTargetsOnSegment: (projectKey: string, environmentKey: string, userSegmentKey: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a single user segment by key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userSegmentKey The user segment\&#39;s key. The key identifies the user segment in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserSegment: (projectKey: string, environmentKey: string, userSegmentKey: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a list of all user segments in the given project.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} [tag] Filter by tag. A tag can be used to group flags across projects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserSegments: (projectKey: string, environmentKey: string, tag?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Update, add, or delete expiring user targets on user segment
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userSegmentKey The user segment\&#39;s key. The key identifies the user segment in your code.
     * @param {object} semanticPatchWithComment Requires a Semantic Patch representation of the desired changes to the resource. \&#39;https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches\&#39;. The addition of comments is also supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchExpiringUserTargetsOnSegment: (projectKey: string, environmentKey: string, userSegmentKey: string, semanticPatchWithComment: object, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Perform a partial update to a user segment.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userSegmentKey The user segment\&#39;s key. The key identifies the user segment in your code.
     * @param {Array<PatchOperation>} patchOnly Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39; Feature flag patches also support JSON Merge Patch format. \&#39;https://tools.ietf.org/html/rfc7386\&#39; The addition of comments is also supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchUserSegment: (projectKey: string, environmentKey: string, userSegmentKey: string, patchOnly: Array<PatchOperation>, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a new user segment.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {InlineObject4} userSegmentBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postUserSegment: (projectKey: string, environmentKey: string, userSegmentBody: InlineObject4, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Update targets included or excluded in an unbounded segment
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userSegmentKey The user segment\&#39;s key. The key identifies the user segment in your code.
     * @param {InlineObject5} unboundedSegmentTargetsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatedUnboundedSegmentTargets: (projectKey: string, environmentKey: string, userSegmentKey: string, unboundedSegmentTargetsBody: InlineObject5, options?: any) => Promise<RequestArgs>;
};
/**
 * UserSegmentsApi - functional programming interface
 * @export
 */
export declare const UserSegmentsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete a user segment.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userSegmentKey The user segment\&#39;s key. The key identifies the user segment in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserSegment(projectKey: string, environmentKey: string, userSegmentKey: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get expiring user targets for user segment
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userSegmentKey The user segment\&#39;s key. The key identifies the user segment in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExpiringUserTargetsOnSegment(projectKey: string, environmentKey: string, userSegmentKey: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTargetingExpirationForSegment>>;
    /**
     *
     * @summary Get a single user segment by key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userSegmentKey The user segment\&#39;s key. The key identifies the user segment in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserSegment(projectKey: string, environmentKey: string, userSegmentKey: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSegment>>;
    /**
     *
     * @summary Get a list of all user segments in the given project.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} [tag] Filter by tag. A tag can be used to group flags across projects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserSegments(projectKey: string, environmentKey: string, tag?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSegments>>;
    /**
     *
     * @summary Update, add, or delete expiring user targets on user segment
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userSegmentKey The user segment\&#39;s key. The key identifies the user segment in your code.
     * @param {object} semanticPatchWithComment Requires a Semantic Patch representation of the desired changes to the resource. \&#39;https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches\&#39;. The addition of comments is also supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchExpiringUserTargetsOnSegment(projectKey: string, environmentKey: string, userSegmentKey: string, semanticPatchWithComment: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTargetingExpirationForSegment>>;
    /**
     *
     * @summary Perform a partial update to a user segment.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userSegmentKey The user segment\&#39;s key. The key identifies the user segment in your code.
     * @param {Array<PatchOperation>} patchOnly Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39; Feature flag patches also support JSON Merge Patch format. \&#39;https://tools.ietf.org/html/rfc7386\&#39; The addition of comments is also supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchUserSegment(projectKey: string, environmentKey: string, userSegmentKey: string, patchOnly: Array<PatchOperation>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSegment>>;
    /**
     *
     * @summary Creates a new user segment.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {InlineObject4} userSegmentBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postUserSegment(projectKey: string, environmentKey: string, userSegmentBody: InlineObject4, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSegment>>;
    /**
     *
     * @summary Update targets included or excluded in an unbounded segment
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userSegmentKey The user segment\&#39;s key. The key identifies the user segment in your code.
     * @param {InlineObject5} unboundedSegmentTargetsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatedUnboundedSegmentTargets(projectKey: string, environmentKey: string, userSegmentKey: string, unboundedSegmentTargetsBody: InlineObject5, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * UserSegmentsApi - factory interface
 * @export
 */
export declare const UserSegmentsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Delete a user segment.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userSegmentKey The user segment\&#39;s key. The key identifies the user segment in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserSegment(projectKey: string, environmentKey: string, userSegmentKey: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Get expiring user targets for user segment
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userSegmentKey The user segment\&#39;s key. The key identifies the user segment in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExpiringUserTargetsOnSegment(projectKey: string, environmentKey: string, userSegmentKey: string, options?: any): AxiosPromise<UserTargetingExpirationForSegment>;
    /**
     *
     * @summary Get a single user segment by key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userSegmentKey The user segment\&#39;s key. The key identifies the user segment in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserSegment(projectKey: string, environmentKey: string, userSegmentKey: string, options?: any): AxiosPromise<UserSegment>;
    /**
     *
     * @summary Get a list of all user segments in the given project.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} [tag] Filter by tag. A tag can be used to group flags across projects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserSegments(projectKey: string, environmentKey: string, tag?: string, options?: any): AxiosPromise<UserSegments>;
    /**
     *
     * @summary Update, add, or delete expiring user targets on user segment
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userSegmentKey The user segment\&#39;s key. The key identifies the user segment in your code.
     * @param {object} semanticPatchWithComment Requires a Semantic Patch representation of the desired changes to the resource. \&#39;https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches\&#39;. The addition of comments is also supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchExpiringUserTargetsOnSegment(projectKey: string, environmentKey: string, userSegmentKey: string, semanticPatchWithComment: object, options?: any): AxiosPromise<UserTargetingExpirationForSegment>;
    /**
     *
     * @summary Perform a partial update to a user segment.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userSegmentKey The user segment\&#39;s key. The key identifies the user segment in your code.
     * @param {Array<PatchOperation>} patchOnly Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39; Feature flag patches also support JSON Merge Patch format. \&#39;https://tools.ietf.org/html/rfc7386\&#39; The addition of comments is also supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchUserSegment(projectKey: string, environmentKey: string, userSegmentKey: string, patchOnly: Array<PatchOperation>, options?: any): AxiosPromise<UserSegment>;
    /**
     *
     * @summary Creates a new user segment.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {InlineObject4} userSegmentBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postUserSegment(projectKey: string, environmentKey: string, userSegmentBody: InlineObject4, options?: any): AxiosPromise<UserSegment>;
    /**
     *
     * @summary Update targets included or excluded in an unbounded segment
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userSegmentKey The user segment\&#39;s key. The key identifies the user segment in your code.
     * @param {InlineObject5} unboundedSegmentTargetsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatedUnboundedSegmentTargets(projectKey: string, environmentKey: string, userSegmentKey: string, unboundedSegmentTargetsBody: InlineObject5, options?: any): AxiosPromise<void>;
};
/**
 * UserSegmentsApi - object-oriented interface
 * @export
 * @class UserSegmentsApi
 * @extends {BaseAPI}
 */
export declare class UserSegmentsApi extends BaseAPI {
    /**
     *
     * @summary Delete a user segment.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userSegmentKey The user segment\&#39;s key. The key identifies the user segment in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSegmentsApi
     */
    deleteUserSegment(projectKey: string, environmentKey: string, userSegmentKey: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Get expiring user targets for user segment
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userSegmentKey The user segment\&#39;s key. The key identifies the user segment in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSegmentsApi
     */
    getExpiringUserTargetsOnSegment(projectKey: string, environmentKey: string, userSegmentKey: string, options?: any): Promise<import("axios").AxiosResponse<UserTargetingExpirationForSegment>>;
    /**
     *
     * @summary Get a single user segment by key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userSegmentKey The user segment\&#39;s key. The key identifies the user segment in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSegmentsApi
     */
    getUserSegment(projectKey: string, environmentKey: string, userSegmentKey: string, options?: any): Promise<import("axios").AxiosResponse<UserSegment>>;
    /**
     *
     * @summary Get a list of all user segments in the given project.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} [tag] Filter by tag. A tag can be used to group flags across projects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSegmentsApi
     */
    getUserSegments(projectKey: string, environmentKey: string, tag?: string, options?: any): Promise<import("axios").AxiosResponse<UserSegments>>;
    /**
     *
     * @summary Update, add, or delete expiring user targets on user segment
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userSegmentKey The user segment\&#39;s key. The key identifies the user segment in your code.
     * @param {object} semanticPatchWithComment Requires a Semantic Patch representation of the desired changes to the resource. \&#39;https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches\&#39;. The addition of comments is also supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSegmentsApi
     */
    patchExpiringUserTargetsOnSegment(projectKey: string, environmentKey: string, userSegmentKey: string, semanticPatchWithComment: object, options?: any): Promise<import("axios").AxiosResponse<UserTargetingExpirationForSegment>>;
    /**
     *
     * @summary Perform a partial update to a user segment.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userSegmentKey The user segment\&#39;s key. The key identifies the user segment in your code.
     * @param {Array<PatchOperation>} patchOnly Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39; Feature flag patches also support JSON Merge Patch format. \&#39;https://tools.ietf.org/html/rfc7386\&#39; The addition of comments is also supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSegmentsApi
     */
    patchUserSegment(projectKey: string, environmentKey: string, userSegmentKey: string, patchOnly: Array<PatchOperation>, options?: any): Promise<import("axios").AxiosResponse<UserSegment>>;
    /**
     *
     * @summary Creates a new user segment.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {InlineObject4} userSegmentBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSegmentsApi
     */
    postUserSegment(projectKey: string, environmentKey: string, userSegmentBody: InlineObject4, options?: any): Promise<import("axios").AxiosResponse<UserSegment>>;
    /**
     *
     * @summary Update targets included or excluded in an unbounded segment
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userSegmentKey The user segment\&#39;s key. The key identifies the user segment in your code.
     * @param {InlineObject5} unboundedSegmentTargetsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSegmentsApi
     */
    updatedUnboundedSegmentTargets(projectKey: string, environmentKey: string, userSegmentKey: string, unboundedSegmentTargetsBody: InlineObject5, options?: any): Promise<import("axios").AxiosResponse<void>>;
}
/**
 * UserSettingsApi - axios parameter creator
 * @export
 */
export declare const UserSettingsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get expiring dates on flags for user
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userKey The user\&#39;s key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExpiringUserTargetsForUser: (projectKey: string, environmentKey: string, userKey: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Fetch a single flag setting for a user by key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userKey The user\&#39;s key.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserFlagSetting: (projectKey: string, environmentKey: string, userKey: string, featureFlagKey: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Fetch a single flag setting for a user by key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userKey The user\&#39;s key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserFlagSettings: (projectKey: string, environmentKey: string, userKey: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Update, add, or delete expiring user targets for a single user on all flags
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userKey The user\&#39;s key.
     * @param {object} semanticPatchWithComment Requires a Semantic Patch representation of the desired changes to the resource. \&#39;https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches\&#39;. The addition of comments is also supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchExpiringUserTargetsForFlags: (projectKey: string, environmentKey: string, userKey: string, semanticPatchWithComment: object, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Specifically enable or disable a feature flag for a user based on their key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userKey The user\&#39;s key.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {InlineObject6} userSettingsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putFlagSetting: (projectKey: string, environmentKey: string, userKey: string, featureFlagKey: string, userSettingsBody: InlineObject6, options?: any) => Promise<RequestArgs>;
};
/**
 * UserSettingsApi - functional programming interface
 * @export
 */
export declare const UserSettingsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get expiring dates on flags for user
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userKey The user\&#39;s key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExpiringUserTargetsForUser(projectKey: string, environmentKey: string, userKey: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTargetingExpirationOnFlagsForUser>>;
    /**
     *
     * @summary Fetch a single flag setting for a user by key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userKey The user\&#39;s key.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserFlagSetting(projectKey: string, environmentKey: string, userKey: string, featureFlagKey: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserFlagSetting>>;
    /**
     *
     * @summary Fetch a single flag setting for a user by key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userKey The user\&#39;s key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserFlagSettings(projectKey: string, environmentKey: string, userKey: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserFlagSettings>>;
    /**
     *
     * @summary Update, add, or delete expiring user targets for a single user on all flags
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userKey The user\&#39;s key.
     * @param {object} semanticPatchWithComment Requires a Semantic Patch representation of the desired changes to the resource. \&#39;https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches\&#39;. The addition of comments is also supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchExpiringUserTargetsForFlags(projectKey: string, environmentKey: string, userKey: string, semanticPatchWithComment: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTargetingExpirationOnFlagsForUser>>;
    /**
     *
     * @summary Specifically enable or disable a feature flag for a user based on their key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userKey The user\&#39;s key.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {InlineObject6} userSettingsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putFlagSetting(projectKey: string, environmentKey: string, userKey: string, featureFlagKey: string, userSettingsBody: InlineObject6, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * UserSettingsApi - factory interface
 * @export
 */
export declare const UserSettingsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get expiring dates on flags for user
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userKey The user\&#39;s key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExpiringUserTargetsForUser(projectKey: string, environmentKey: string, userKey: string, options?: any): AxiosPromise<UserTargetingExpirationOnFlagsForUser>;
    /**
     *
     * @summary Fetch a single flag setting for a user by key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userKey The user\&#39;s key.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserFlagSetting(projectKey: string, environmentKey: string, userKey: string, featureFlagKey: string, options?: any): AxiosPromise<UserFlagSetting>;
    /**
     *
     * @summary Fetch a single flag setting for a user by key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userKey The user\&#39;s key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserFlagSettings(projectKey: string, environmentKey: string, userKey: string, options?: any): AxiosPromise<UserFlagSettings>;
    /**
     *
     * @summary Update, add, or delete expiring user targets for a single user on all flags
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userKey The user\&#39;s key.
     * @param {object} semanticPatchWithComment Requires a Semantic Patch representation of the desired changes to the resource. \&#39;https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches\&#39;. The addition of comments is also supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchExpiringUserTargetsForFlags(projectKey: string, environmentKey: string, userKey: string, semanticPatchWithComment: object, options?: any): AxiosPromise<UserTargetingExpirationOnFlagsForUser>;
    /**
     *
     * @summary Specifically enable or disable a feature flag for a user based on their key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userKey The user\&#39;s key.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {InlineObject6} userSettingsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putFlagSetting(projectKey: string, environmentKey: string, userKey: string, featureFlagKey: string, userSettingsBody: InlineObject6, options?: any): AxiosPromise<void>;
};
/**
 * UserSettingsApi - object-oriented interface
 * @export
 * @class UserSettingsApi
 * @extends {BaseAPI}
 */
export declare class UserSettingsApi extends BaseAPI {
    /**
     *
     * @summary Get expiring dates on flags for user
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userKey The user\&#39;s key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSettingsApi
     */
    getExpiringUserTargetsForUser(projectKey: string, environmentKey: string, userKey: string, options?: any): Promise<import("axios").AxiosResponse<UserTargetingExpirationOnFlagsForUser>>;
    /**
     *
     * @summary Fetch a single flag setting for a user by key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userKey The user\&#39;s key.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSettingsApi
     */
    getUserFlagSetting(projectKey: string, environmentKey: string, userKey: string, featureFlagKey: string, options?: any): Promise<import("axios").AxiosResponse<UserFlagSetting>>;
    /**
     *
     * @summary Fetch a single flag setting for a user by key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userKey The user\&#39;s key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSettingsApi
     */
    getUserFlagSettings(projectKey: string, environmentKey: string, userKey: string, options?: any): Promise<import("axios").AxiosResponse<UserFlagSettings>>;
    /**
     *
     * @summary Update, add, or delete expiring user targets for a single user on all flags
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userKey The user\&#39;s key.
     * @param {object} semanticPatchWithComment Requires a Semantic Patch representation of the desired changes to the resource. \&#39;https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches\&#39;. The addition of comments is also supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSettingsApi
     */
    patchExpiringUserTargetsForFlags(projectKey: string, environmentKey: string, userKey: string, semanticPatchWithComment: object, options?: any): Promise<import("axios").AxiosResponse<UserTargetingExpirationOnFlagsForUser>>;
    /**
     *
     * @summary Specifically enable or disable a feature flag for a user based on their key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userKey The user\&#39;s key.
     * @param {string} featureFlagKey The feature flag\&#39;s key. The key identifies the flag in your code.
     * @param {InlineObject6} userSettingsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSettingsApi
     */
    putFlagSetting(projectKey: string, environmentKey: string, userKey: string, featureFlagKey: string, userSettingsBody: InlineObject6, options?: any): Promise<import("axios").AxiosResponse<void>>;
}
/**
 * UsersApi - axios parameter creator
 * @export
 */
export declare const UsersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete a user by ID.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userKey The user\&#39;s key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser: (projectKey: string, environmentKey: string, userKey: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Search users in LaunchDarkly based on their last active date, or a search query. It should not be used to enumerate all users in LaunchDarkly-- use the List users API resource.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} [q] Search query.
     * @param {number} [limit] Pagination limit.
     * @param {number} [offset] Specifies the first item to return in the collection.
     * @param {number} [after] A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occurred after this timestamp.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSearchUsers: (projectKey: string, environmentKey: string, q?: string, limit?: number, offset?: number, after?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a user by key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userKey The user\&#39;s key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: (projectKey: string, environmentKey: string, userKey: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List all users in the environment. Includes the total count of users. In each page, there will be up to \'limit\' users returned (default 20). This is useful for exporting all users in the system for further analysis. Paginated collections will include a next link containing a URL with the next set of elements in the collection.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {number} [limit] Pagination limit.
     * @param {string} [h] This parameter is required when following \&quot;next\&quot; links.
     * @param {string} [scrollId] This parameter is required when following \&quot;next\&quot; links.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers: (projectKey: string, environmentKey: string, limit?: number, h?: string, scrollId?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete a user by ID.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userKey The user\&#39;s key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(projectKey: string, environmentKey: string, userKey: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Search users in LaunchDarkly based on their last active date, or a search query. It should not be used to enumerate all users in LaunchDarkly-- use the List users API resource.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} [q] Search query.
     * @param {number} [limit] Pagination limit.
     * @param {number} [offset] Specifies the first item to return in the collection.
     * @param {number} [after] A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occurred after this timestamp.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSearchUsers(projectKey: string, environmentKey: string, q?: string, limit?: number, offset?: number, after?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Users>>;
    /**
     *
     * @summary Get a user by key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userKey The user\&#39;s key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(projectKey: string, environmentKey: string, userKey: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @summary List all users in the environment. Includes the total count of users. In each page, there will be up to \'limit\' users returned (default 20). This is useful for exporting all users in the system for further analysis. Paginated collections will include a next link containing a URL with the next set of elements in the collection.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {number} [limit] Pagination limit.
     * @param {string} [h] This parameter is required when following \&quot;next\&quot; links.
     * @param {string} [scrollId] This parameter is required when following \&quot;next\&quot; links.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(projectKey: string, environmentKey: string, limit?: number, h?: string, scrollId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Users>>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Delete a user by ID.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userKey The user\&#39;s key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(projectKey: string, environmentKey: string, userKey: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Search users in LaunchDarkly based on their last active date, or a search query. It should not be used to enumerate all users in LaunchDarkly-- use the List users API resource.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} [q] Search query.
     * @param {number} [limit] Pagination limit.
     * @param {number} [offset] Specifies the first item to return in the collection.
     * @param {number} [after] A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occurred after this timestamp.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSearchUsers(projectKey: string, environmentKey: string, q?: string, limit?: number, offset?: number, after?: number, options?: any): AxiosPromise<Users>;
    /**
     *
     * @summary Get a user by key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userKey The user\&#39;s key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(projectKey: string, environmentKey: string, userKey: string, options?: any): AxiosPromise<User>;
    /**
     *
     * @summary List all users in the environment. Includes the total count of users. In each page, there will be up to \'limit\' users returned (default 20). This is useful for exporting all users in the system for further analysis. Paginated collections will include a next link containing a URL with the next set of elements in the collection.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {number} [limit] Pagination limit.
     * @param {string} [h] This parameter is required when following \&quot;next\&quot; links.
     * @param {string} [scrollId] This parameter is required when following \&quot;next\&quot; links.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(projectKey: string, environmentKey: string, limit?: number, h?: string, scrollId?: string, options?: any): AxiosPromise<Users>;
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI {
    /**
     *
     * @summary Delete a user by ID.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userKey The user\&#39;s key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    deleteUser(projectKey: string, environmentKey: string, userKey: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Search users in LaunchDarkly based on their last active date, or a search query. It should not be used to enumerate all users in LaunchDarkly-- use the List users API resource.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} [q] Search query.
     * @param {number} [limit] Pagination limit.
     * @param {number} [offset] Specifies the first item to return in the collection.
     * @param {number} [after] A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occurred after this timestamp.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getSearchUsers(projectKey: string, environmentKey: string, q?: string, limit?: number, offset?: number, after?: number, options?: any): Promise<import("axios").AxiosResponse<Users>>;
    /**
     *
     * @summary Get a user by key.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {string} userKey The user\&#39;s key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUser(projectKey: string, environmentKey: string, userKey: string, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     *
     * @summary List all users in the environment. Includes the total count of users. In each page, there will be up to \'limit\' users returned (default 20). This is useful for exporting all users in the system for further analysis. Paginated collections will include a next link containing a URL with the next set of elements in the collection.
     * @param {string} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {string} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {number} [limit] Pagination limit.
     * @param {string} [h] This parameter is required when following \&quot;next\&quot; links.
     * @param {string} [scrollId] This parameter is required when following \&quot;next\&quot; links.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUsers(projectKey: string, environmentKey: string, limit?: number, h?: string, scrollId?: string, options?: any): Promise<import("axios").AxiosResponse<Users>>;
}
/**
 * WebhooksApi - axios parameter creator
 * @export
 */
export declare const WebhooksApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete a webhook by ID.
     * @param {string} resourceId The resource ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWebhook: (resourceId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a webhook by ID.
     * @param {string} resourceId The resource ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhook: (resourceId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Fetch a list of all webhooks.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhooks: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Modify a webhook by ID.
     * @param {string} resourceId The resource ID.
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchWebhook: (resourceId: string, patchDelta: Array<PatchOperation>, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a webhook.
     * @param {InlineObject7} webhookBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postWebhook: (webhookBody: InlineObject7, options?: any) => Promise<RequestArgs>;
};
/**
 * WebhooksApi - functional programming interface
 * @export
 */
export declare const WebhooksApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete a webhook by ID.
     * @param {string} resourceId The resource ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWebhook(resourceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get a webhook by ID.
     * @param {string} resourceId The resource ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhook(resourceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webhook>>;
    /**
     *
     * @summary Fetch a list of all webhooks.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhooks(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webhooks>>;
    /**
     *
     * @summary Modify a webhook by ID.
     * @param {string} resourceId The resource ID.
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchWebhook(resourceId: string, patchDelta: Array<PatchOperation>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webhook>>;
    /**
     *
     * @summary Create a webhook.
     * @param {InlineObject7} webhookBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postWebhook(webhookBody: InlineObject7, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webhook>>;
};
/**
 * WebhooksApi - factory interface
 * @export
 */
export declare const WebhooksApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Delete a webhook by ID.
     * @param {string} resourceId The resource ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWebhook(resourceId: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Get a webhook by ID.
     * @param {string} resourceId The resource ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhook(resourceId: string, options?: any): AxiosPromise<Webhook>;
    /**
     *
     * @summary Fetch a list of all webhooks.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhooks(options?: any): AxiosPromise<Webhooks>;
    /**
     *
     * @summary Modify a webhook by ID.
     * @param {string} resourceId The resource ID.
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchWebhook(resourceId: string, patchDelta: Array<PatchOperation>, options?: any): AxiosPromise<Webhook>;
    /**
     *
     * @summary Create a webhook.
     * @param {InlineObject7} webhookBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postWebhook(webhookBody: InlineObject7, options?: any): AxiosPromise<Webhook>;
};
/**
 * WebhooksApi - object-oriented interface
 * @export
 * @class WebhooksApi
 * @extends {BaseAPI}
 */
export declare class WebhooksApi extends BaseAPI {
    /**
     *
     * @summary Delete a webhook by ID.
     * @param {string} resourceId The resource ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    deleteWebhook(resourceId: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Get a webhook by ID.
     * @param {string} resourceId The resource ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    getWebhook(resourceId: string, options?: any): Promise<import("axios").AxiosResponse<Webhook>>;
    /**
     *
     * @summary Fetch a list of all webhooks.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    getWebhooks(options?: any): Promise<import("axios").AxiosResponse<Webhooks>>;
    /**
     *
     * @summary Modify a webhook by ID.
     * @param {string} resourceId The resource ID.
     * @param {Array<PatchOperation>} patchDelta Requires a JSON Patch representation of the desired changes to the project. \&#39;http://jsonpatch.com/\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    patchWebhook(resourceId: string, patchDelta: Array<PatchOperation>, options?: any): Promise<import("axios").AxiosResponse<Webhook>>;
    /**
     *
     * @summary Create a webhook.
     * @param {InlineObject7} webhookBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    postWebhook(webhookBody: InlineObject7, options?: any): Promise<import("axios").AxiosResponse<Webhook>>;
}
